/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Skripsi_IhtiarAlfath ;

/**
 *
 * @author User
 */
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FilenameUtils;
import skripsi_ihtiaralfath.RC4A;
import skripsi_ihtiaralfath.avalancheEffect;
import skripsi_ihtiaralfath.RSA;
import skripsi_ihtiaralfath.processRSA;
import skripsi_ihtiaralfath.Key_RSA;

public class userInterface extends javax.swing.JFrame {
    private RSA rsa = new RSA();
    private Key_RSA rsaKey = new Key_RSA();
    private Key_RSACRT crtKey = new Key_RSACRT();
    private RC4A rc4A = new RC4A();
    private processRSACRT crtProcess = new processRSACRT();
    private processRSA rsaProcess = new processRSA();
    private long start, end, executionTime;
    
    public userInterface() {
        initComponents();
        setTitle("");
        firstPanel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane_RSACRT = new javax.swing.JLayeredPane();
        jPanel_RSACRT = new javax.swing.JPanel();
        jButton_RSACRT_option = new javax.swing.JButton();
        jComboBox_RSACRT = new javax.swing.JComboBox<>();
        jLayeredPane_enkripsi_RSACRT = new javax.swing.JLayeredPane();
        jPanel_enkripsi_RSACRT = new javax.swing.JPanel();
        jLabel_enkripsi_RSACRT = new javax.swing.JLabel();
        jPanel_enkripsiField_RSACRT = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel_publicKey_RSACRT = new javax.swing.JLabel();
        jLabel_browseFile_enkripsi_RSACRT = new javax.swing.JLabel();
        jLabel1_E_publicKey_RSACRT = new javax.swing.JLabel();
        jTextField_E_publicKey = new javax.swing.JTextField();
        jTextField_plainTeks1 = new javax.swing.JTextField();
        jTextField_N_publicKey = new javax.swing.JTextField();
        jButton_browsePlaintext_RSACRT = new javax.swing.JButton();
        jButton_GenerateKey_RSACRT = new javax.swing.JButton();
        jLabel_plainteks_RSACRT_enkripsi = new javax.swing.JLabel();
        jLabel_processingTime_RSACRT_enkripsi = new javax.swing.JLabel();
        jLabel1_cipherteks_RSACRT_enkripsi = new javax.swing.JLabel();
        jTextField_processingTime_RSACRT_enkripsi = new javax.swing.JTextField();
        jButton_enkripsi_RSACRT = new javax.swing.JButton();
        jScrollPane_plainText_enkripsi_RSACRT = new javax.swing.JScrollPane();
        jTextArea_plainText_enkripsi_RSACRT = new javax.swing.JTextArea();
        jScrollPane_cipherText_enkripsi_RSACRT = new javax.swing.JScrollPane();
        jTextArea_cipherText_enkripsi_RSACRT = new javax.swing.JTextArea();
        jLayeredPane_dekripsi_RSACRT = new javax.swing.JLayeredPane();
        jPanel_dekripsi_RSACRT = new javax.swing.JPanel();
        jLabel_dekripsi_RSACRT = new javax.swing.JLabel();
        jPanel_dekripsiField_RSACRT = new javax.swing.JPanel();
        jLabel_privateKey_RSACRT = new javax.swing.JLabel();
        jLabel_browseFile_dekripsi_RSACRT = new javax.swing.JLabel();
        jTextField_cipherTeks1 = new javax.swing.JTextField();
        jTextField_RSACRT_privateKey = new javax.swing.JTextField();
        jButton_browseCiphertext_RSACRT = new javax.swing.JButton();
        jButton_browsePrivatekey_RSACRT = new javax.swing.JButton();
        jLabel_cipherteks_RSACRT_dekripsi = new javax.swing.JLabel();
        jLabel_processingTime_RSACRT_dekripsi = new javax.swing.JLabel();
        jButton_dekripsi_RSACRT = new javax.swing.JButton();
        jLabel1_plainteks_RSACRT_dekripsi = new javax.swing.JLabel();
        jTextField_processingTime_RSACRT_dekripsi = new javax.swing.JTextField();
        jScrollPane_cipherText_dekripsi_RSACRT = new javax.swing.JScrollPane();
        jTextArea_cipherText_dekripsi_RSACRT = new javax.swing.JTextArea();
        jScrollPane_plainText_dekripsi_RSACRT = new javax.swing.JScrollPane();
        jTextArea_plainText_dekripsi_RSACRT = new javax.swing.JTextArea();
        jLayeredPane_avalancheEffect_RSACRT = new javax.swing.JLayeredPane();
        jPanel_avalancheEffect_RSACRT = new javax.swing.JPanel();
        jPanel__avalancheEffect_RSACRT_Form = new javax.swing.JPanel();
        jLabel_plaintext1_avalancheEffect_RSACRT = new javax.swing.JLabel();
        jLabel_result_avalancheEffect_RSACRT = new javax.swing.JLabel();
        jTextField_N_avalancheEffect_RSACRT = new javax.swing.JTextField();
        jTextField_E_avalancheEffect_RSACRT = new javax.swing.JTextField();
        jButton_calculate_avalancheEffect_RSACRT = new javax.swing.JButton();
        jButton_browseKey_avalancheEffect_RSACRT = new javax.swing.JButton();
        jLabel_key_avalancheEffect_RSACRT = new javax.swing.JLabel();
        jLabel_N_avalancheEffect_RSACRT = new javax.swing.JLabel();
        jLabel_E_avalancheEffect_RSACRT = new javax.swing.JLabel();
        jScrollPane_avalancheEffect_RSACRT = new javax.swing.JScrollPane();
        jTextArea_avalancheEffect_RSACRT = new javax.swing.JTextArea();
        jScrollPane_avalancheEffect_RC4A4 = new javax.swing.JScrollPane();
        jTextArea_plaintext1_avalancheEffect_RSACRT = new javax.swing.JTextArea();
        jButton_browsePlaintext1_avalancheEffect_RSACRT = new javax.swing.JButton();
        jLabel_generateKey_RSACRT2 = new javax.swing.JLabel();
        jLayeredPane_RSA = new javax.swing.JLayeredPane();
        jPanel_RSA = new javax.swing.JPanel();
        jButton_RSA = new javax.swing.JButton();
        jComboBox_RSA = new javax.swing.JComboBox<>();
        jLayeredPane_enkripsi_RSA = new javax.swing.JLayeredPane();
        jPanel_enkripsi_RSA = new javax.swing.JPanel();
        jLabel_enkripsi_RSA = new javax.swing.JLabel();
        jPanel_enkripsiField_RSA = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel_publicKey_RSA = new javax.swing.JLabel();
        jLabel_browseFile_enkripsi_RSA = new javax.swing.JLabel();
        jLabel1_E_publicKey_RSA = new javax.swing.JLabel();
        jTextField_E_publicKeyRSA = new javax.swing.JTextField();
        jTextField_plainTeks_RSA = new javax.swing.JTextField();
        jTextField_N_publicKeyRSA = new javax.swing.JTextField();
        jButton_browsePlaintext_RSA = new javax.swing.JButton();
        jButton_GenerateKey_RSA = new javax.swing.JButton();
        jLabel_plainteks_RSA_enkripsi = new javax.swing.JLabel();
        jLabel_processingTime_RSA_enkripsi = new javax.swing.JLabel();
        jLabel1_cipherteks_RSA_enkripsi = new javax.swing.JLabel();
        jTextField_processingTime_RSA_enkripsi = new javax.swing.JTextField();
        jButton_enkripsi_RSA = new javax.swing.JButton();
        jScrollPane_plainText_enkripsi_RSA = new javax.swing.JScrollPane();
        jTextArea_plainText_enkripsi_RSA = new javax.swing.JTextArea();
        jScrollPane_cipherText_enkripsi_RSA = new javax.swing.JScrollPane();
        jTextArea_cipherText_enkripsi_RSA = new javax.swing.JTextArea();
        jLayeredPane_dekripsi_RSA = new javax.swing.JLayeredPane();
        jPanel_dekripsi_RSA = new javax.swing.JPanel();
        jLabel_dekripsi_RSA = new javax.swing.JLabel();
        jPanel_dekripsiField_RSA = new javax.swing.JPanel();
        jLabel_privateKey_RSA = new javax.swing.JLabel();
        jLabel_browseFile_dekripsi_RSA = new javax.swing.JLabel();
        jTextField_cipherTeksRSA = new javax.swing.JTextField();
        jTextField_RSA_privateKey = new javax.swing.JTextField();
        jButton_browseCiphertext_RSA = new javax.swing.JButton();
        jButton_browsePrivatekey_RSA = new javax.swing.JButton();
        jLabel_cipherteks_RSA_dekripsi = new javax.swing.JLabel();
        jLabel_processingTime_RSA_dekripsi = new javax.swing.JLabel();
        jButton_dekripsi_RSA = new javax.swing.JButton();
        jLabel1_plainteks_RSA_dekripsi = new javax.swing.JLabel();
        jTextField_processingTime_RSA_dekripsi = new javax.swing.JTextField();
        jScrollPane_cipherText_dekripsi_RSA = new javax.swing.JScrollPane();
        jTextArea_cipherText_dekripsi_RSA = new javax.swing.JTextArea();
        jScrollPane_plainText_dekripsi_RSA = new javax.swing.JScrollPane();
        jTextArea_plainText_dekripsi_RSA = new javax.swing.JTextArea();
        jLayeredPane_avalancheEffect = new javax.swing.JLayeredPane();
        jPanel_avalancheEffect_RSA = new javax.swing.JPanel();
        jPanel__avalancheEffect_RSA_Form = new javax.swing.JPanel();
        jLabel_result_avalancheEffect_RSA = new javax.swing.JLabel();
        jTextField_N_avalancheEffect_RSA = new javax.swing.JTextField();
        jTextField_E_avalancheEffect_RSA = new javax.swing.JTextField();
        jButton_calculate_avalancheEffect_RSA = new javax.swing.JButton();
        jButton_browseKey_avalancheEffect_RSA = new javax.swing.JButton();
        jLabel_key_avalancheEffect_RSA = new javax.swing.JLabel();
        jLabel_N_avalancheEffect_RSA = new javax.swing.JLabel();
        jLabel_E_avalancheEffect_RSA = new javax.swing.JLabel();
        jScrollPane_avalancheEffect_RSA = new javax.swing.JScrollPane();
        jTextArea_avalancheEffect_RSA = new javax.swing.JTextArea();
        jLabel_plaintext1_avalancheEffect_RSA = new javax.swing.JLabel();
        jButton_browsePlaintext1_avalancheEffect_RSA = new javax.swing.JButton();
        jScrollPane_avalancheEffect_RC4A6 = new javax.swing.JScrollPane();
        jTextArea_plaintext1_avalancheEffect_RSA = new javax.swing.JTextArea();
        jLabel_generateKey_RSA = new javax.swing.JLabel();
        jLayeredPane_RC4A = new javax.swing.JLayeredPane();
        jPanel_RC4A = new javax.swing.JPanel();
        jButton_RC4A_option = new javax.swing.JButton();
        jComboBox_RC4A = new javax.swing.JComboBox<>();
        jLayeredPane_enkripsi_RC4A = new javax.swing.JLayeredPane();
        jPanel_enkripsi_RC4A = new javax.swing.JPanel();
        jLabel_enkripsi_RC4A = new javax.swing.JLabel();
        jPanel_enkripsiField_RC4A = new javax.swing.JPanel();
        jLabel_Key_RC4A = new javax.swing.JLabel();
        jLabel_browseFile_enkripsi_RC4A = new javax.swing.JLabel();
        jTextField_plainTeks = new javax.swing.JTextField();
        jTextField_key_RC4A = new javax.swing.JTextField();
        jButton_browsePlaintext_RC4A = new javax.swing.JButton();
        jLabel_plainteks_RC4A_enkripsi = new javax.swing.JLabel();
        jLabel_processingTime_RC4A_enkripsi = new javax.swing.JLabel();
        jButton_enkripsi_RC4A = new javax.swing.JButton();
        jLabel_cipherteks_RC4A_enkripsi = new javax.swing.JLabel();
        jTextField_processingTime_RC4A_enkripsi = new javax.swing.JTextField();
        jScrollPane_cipherText_enkripsi_RC4A = new javax.swing.JScrollPane();
        jTextArea_cipherText_enkripsi_RC4A = new javax.swing.JTextArea();
        jScrollPane_plainText_enkripsi_RC4A = new javax.swing.JScrollPane();
        jTextArea_plainText_enkripsi_RC4A = new javax.swing.JTextArea();
        jLayeredPane_dekripsi_RC4A = new javax.swing.JLayeredPane();
        jPanel_dekripsi_RC4A = new javax.swing.JPanel();
        jLabel_dekripsi_RC4A = new javax.swing.JLabel();
        jPanel_dekripsiField_RC4A = new javax.swing.JPanel();
        jLabel_Key_RC4A1 = new javax.swing.JLabel();
        jLabel_browseFile_dekripsi_RC4A = new javax.swing.JLabel();
        jTextField_cipherTeks = new javax.swing.JTextField();
        jTextField_key_RC4A1 = new javax.swing.JTextField();
        jButton_browseciphertext_RC4A = new javax.swing.JButton();
        jLabel_cipherteks_RC4A_dekripsi = new javax.swing.JLabel();
        jLabel_processingTime_RC4A_dekripsi = new javax.swing.JLabel();
        jButton_dekripsi_RC4A = new javax.swing.JButton();
        jLabel_plainteks_RC4A_dekripsi = new javax.swing.JLabel();
        jTextField_processingTime_RC4A_dekripsi = new javax.swing.JTextField();
        jScrollPane_plainText_dekripsi_RC4A = new javax.swing.JScrollPane();
        jTextArea_plainText_dekripsi_RC4A = new javax.swing.JTextArea();
        jScrollPane_cipherText_dekripsi_RC4A = new javax.swing.JScrollPane();
        jTextArea_cipherText_dekripsi_RC4A = new javax.swing.JTextArea();
        jLayeredPane_avalancheEffect_RC4A = new javax.swing.JLayeredPane();
        jPanel_avalancheEffect_RC4A = new javax.swing.JPanel();
        jPanel__avalancheEffect_RC4A_Form = new javax.swing.JPanel();
        jLabel_plaintext2_avalancheEffect_RC4A = new javax.swing.JLabel();
        jLabel_plaintext1_avalancheEffect_RC4A = new javax.swing.JLabel();
        jLabel_result_avalancheEffect_RC4A = new javax.swing.JLabel();
        jTextField_key_avalancheEffect_RC4A = new javax.swing.JTextField();
        jLabel_key_avalancheEffect_RC4A = new javax.swing.JLabel();
        jScrollPane_avalancheEffect_RC4A = new javax.swing.JScrollPane();
        jTextArea_plainText2_avalancheEffect_RC4A = new javax.swing.JTextArea();
        jButton_calculate_avalancheEffect_RC4A1 = new javax.swing.JButton();
        jScrollPane_avalancheEffect_RC4A1 = new javax.swing.JScrollPane();
        jTextArea_avalancheEffect_RC4A1 = new javax.swing.JTextArea();
        jScrollPane_avalancheEffect_RC4A2 = new javax.swing.JScrollPane();
        jTextArea_plainText1_avalancheEffect_RC4A = new javax.swing.JTextArea();
        jButton_browsePlaintext1_avalancheEffect_RC4A = new javax.swing.JButton();
        jButton_browsePlaintext2_avalancheEffect_RC4A = new javax.swing.JButton();
        jLabel_avalancheEffect_RC4A = new javax.swing.JLabel();
        jLayeredPane_Hybrid = new javax.swing.JLayeredPane();
        jPanel_Hybrid = new javax.swing.JPanel();
        jButton_Hybrid_option = new javax.swing.JButton();
        jComboBox_Hybrid = new javax.swing.JComboBox<>();
        jLayeredPane_enkripsi_Hybrid = new javax.swing.JLayeredPane();
        jPanel_enkripsi_Hybrid = new javax.swing.JPanel();
        jPanel_enkripsiPlainteksField_RC4A = new javax.swing.JPanel();
        jLabel_Key_RC4A_enkripsi_hybrid = new javax.swing.JLabel();
        jLabel_browseFile_enkripsi_hybrid_RC4A = new javax.swing.JLabel();
        jTextField_plainTeks_hybrid = new javax.swing.JTextField();
        jTextField_key_enkripsi_hybrid_RC4A = new javax.swing.JTextField();
        jButton_browsePlaintext_hybrid_RC4A = new javax.swing.JButton();
        jLabel_plainteks_hybrid_RC4A_enkripsi = new javax.swing.JLabel();
        jLabel_processingTime_hybrid_enkripsi_plainTeks = new javax.swing.JLabel();
        jButton_enkripsi_hybrid_RC4A = new javax.swing.JButton();
        jLabel_cipherteks_hybrid_RC4A_enkripsi = new javax.swing.JLabel();
        jTextField_processingTime_hybrid_RC4A_enkripsi = new javax.swing.JTextField();
        jScrollPane_cipherText_enkripsi_hybridRC4A = new javax.swing.JScrollPane();
        jTextArea_cipherText_enkripsi_hybridRC4A = new javax.swing.JTextArea();
        jScrollPane_plainText_enkripsi_hybridRC4A = new javax.swing.JScrollPane();
        jTextArea_plainText_enkripsi_hybridRC4A = new javax.swing.JTextArea();
        jLabel_Key_hybrid_RSACRT = new javax.swing.JLabel();
        jTextField_key_N_Hybrid_RSACRT = new javax.swing.JTextField();
        jLabel_N_Key_Hybrid_RSACRT = new javax.swing.JLabel();
        jLabel_E_Key_Hybrid_RSACRT = new javax.swing.JLabel();
        jTextField_E_key_Hybrid_RSACRT = new javax.swing.JTextField();
        jButton_generate_RSACRT_Key_Hybrid = new javax.swing.JButton();
        jLabel_cipherKey_Hybrid_RSACRT_enkripsi = new javax.swing.JLabel();
        jScrollPane_cipherKey_enkripsi_hybridRSACRT = new javax.swing.JScrollPane();
        jTextArea_cipherKey_enkripsi_hybridRSACRT = new javax.swing.JTextArea();
        jPanel_enkripsiKeyField_RSACRT = new javax.swing.JPanel();
        jLabel_enkripsi_HybridCryptosystem = new javax.swing.JLabel();
        jLayeredPane_dekripsi_Hybrid = new javax.swing.JLayeredPane();
        jPanel_dekripsi_Hybrid = new javax.swing.JPanel();
        jPanel_dekripsiKeyField_RSACRT = new javax.swing.JPanel();
        jLabel_Key_dekripsi_hybrid_RSACRT = new javax.swing.JLabel();
        jTextArea_cipherKey_dekripsi_hybridRSACRT = new javax.swing.JTextField();
        jLabel_cipherKey_Hybrid_RSACRT_dekripsi = new javax.swing.JLabel();
        jLabel_processingTime_Hybrid_dekripsi = new javax.swing.JLabel();
        jTextField_processingTime_Hybrid_dekripsi = new javax.swing.JTextField();
        jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT = new javax.swing.JTextField();
        jButton_browse_RSACRT_privateKey_Hybrid = new javax.swing.JButton();
        jScrollPane_cipherKey_dekripsi_hybridRSACRT = new javax.swing.JScrollPane();
        jTextArea_plainKey_dekripsi_hybridRSACRT = new javax.swing.JTextArea();
        jButton_dekripsi_hybrid = new javax.swing.JButton();
        jLabel_browseFile_dekripsi_hybrid_RC4A = new javax.swing.JLabel();
        jTextField_cipherTeks_dekripsi_hybrid = new javax.swing.JTextField();
        jButton_browsecipherText_Hybrid_RSACRT = new javax.swing.JButton();
        jScrollPane_cipherTeks_dekripsi_hybridRC4A = new javax.swing.JScrollPane();
        jTextArea_cipherTeks_dekripsi_hybridRC4A = new javax.swing.JTextArea();
        jLabel_cipherTeks_hybrid_RC4A_dekripsi = new javax.swing.JLabel();
        jLabel_plainTeks_hybrid_RC4A_dekripsi = new javax.swing.JLabel();
        jScrollPane_plainTeks_dekripsi_hybridRC4A = new javax.swing.JScrollPane();
        jTextArea_plainTeks_dekripsi_hybridRC4A = new javax.swing.JTextArea();
        jLabel_plainKey_Hybrid_RSACRT_dekripsi = new javax.swing.JLabel();
        jLabel_dekripsi_HybridCryptosystem = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_algoritma = new javax.swing.JMenu();
        jMenuItem_RSA = new javax.swing.JMenuItem();
        jMenuItem_RSACRT = new javax.swing.JMenuItem();
        jMenuItem_HybridCryptosystem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GenerateKey_RSACRT");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLayeredPane_RSACRT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_RSACRT.setPreferredSize(new java.awt.Dimension(1004, 480));

        jButton_RSACRT_option.setText("Go");
        jButton_RSACRT_option.setToolTipText("");
        jButton_RSACRT_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RSACRT_optionActionPerformed(evt);
            }
        });

        jComboBox_RSACRT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypt", "Decrypt", "Avalanche Effect" }));
        jComboBox_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_RSACRTActionPerformed(evt);
            }
        });

        jPanel_enkripsi_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsi_RSACRT.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_enkripsi_RSACRT.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_enkripsi_RSACRT.setForeground(java.awt.Color.white);
        jLabel_enkripsi_RSACRT.setText("RSA-CRT Encryption");

        jPanel_enkripsiField_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsiField_RSACRT.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_enkripsiField_RSACRT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setForeground(java.awt.Color.white);
        jLabel8.setText("N");
        jPanel_enkripsiField_RSACRT.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, 32));

        jLabel_publicKey_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_publicKey_RSACRT.setForeground(java.awt.Color.white);
        jLabel_publicKey_RSACRT.setText("Public Key    :");
        jPanel_enkripsiField_RSACRT.add(jLabel_publicKey_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        jLabel_browseFile_enkripsi_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_enkripsi_RSACRT.setForeground(java.awt.Color.white);
        jLabel_browseFile_enkripsi_RSACRT.setText("Choose File  :");
        jPanel_enkripsiField_RSACRT.add(jLabel_browseFile_enkripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 36, 98, 20));

        jLabel1_E_publicKey_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_E_publicKey_RSACRT.setForeground(java.awt.Color.white);
        jLabel1_E_publicKey_RSACRT.setText("E");
        jPanel_enkripsiField_RSACRT.add(jLabel1_E_publicKey_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, 32));

        jTextField_E_publicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_E_publicKeyActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jTextField_E_publicKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, 280, 32));
        jTextField_E_publicKey.setEditable(false);

        jTextField_plainTeks1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_plainTeks1ActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jTextField_plainTeks1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 280, 32));
        jTextField_plainTeks1.setEditable(false);

        jTextField_N_publicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_N_publicKeyActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jTextField_N_publicKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 280, 32));
        jTextField_N_publicKey.setEditable(false);

        jButton_browsePlaintext_RSACRT.setText("Browse");
        jButton_browsePlaintext_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext_RSACRTActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jButton_browsePlaintext_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 30, 110, 30));

        jButton_GenerateKey_RSACRT.setText("Generate Key");
        jButton_GenerateKey_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GenerateKey_RSACRTActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jButton_GenerateKey_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, 110, 30));

        jLabel_plainteks_RSACRT_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_plainteks_RSACRT_enkripsi.setForeground(java.awt.Color.white);
        jLabel_plainteks_RSACRT_enkripsi.setText("Plaintext  :");
        jPanel_enkripsiField_RSACRT.add(jLabel_plainteks_RSACRT_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 98, 32));

        jLabel_processingTime_RSACRT_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RSACRT_enkripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RSACRT_enkripsi.setText("Processing Time :");
        jPanel_enkripsiField_RSACRT.add(jLabel_processingTime_RSACRT_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 340, 98, -1));

        jLabel1_cipherteks_RSACRT_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_cipherteks_RSACRT_enkripsi.setForeground(java.awt.Color.white);
        jLabel1_cipherteks_RSACRT_enkripsi.setText("Ciphertext  :");
        jPanel_enkripsiField_RSACRT.add(jLabel1_cipherteks_RSACRT_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 170, 98, 32));

        jTextField_processingTime_RSACRT_enkripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_processingTime_RSACRT_enkripsiActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jTextField_processingTime_RSACRT_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 330, 180, -1));
        jTextField_processingTime_RSACRT_enkripsi.setEditable(false);

        jButton_enkripsi_RSACRT.setText("Encrypt");
        jButton_enkripsi_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_enkripsi_RSACRTActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSACRT.add(jButton_enkripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 90, 30));

        jTextArea_plainText_enkripsi_RSACRT.setColumns(20);
        jTextArea_plainText_enkripsi_RSACRT.setRows(5);
        jScrollPane_plainText_enkripsi_RSACRT.setViewportView(jTextArea_plainText_enkripsi_RSACRT);

        jPanel_enkripsiField_RSACRT.add(jScrollPane_plainText_enkripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 350, 110));

        jTextArea_cipherText_enkripsi_RSACRT.setColumns(20);
        jTextArea_cipherText_enkripsi_RSACRT.setRows(5);
        jScrollPane_cipherText_enkripsi_RSACRT.setViewportView(jTextArea_cipherText_enkripsi_RSACRT);
        jTextArea_cipherText_enkripsi_RSACRT.setEditable(false);

        jPanel_enkripsiField_RSACRT.add(jScrollPane_cipherText_enkripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 350, 110));

        javax.swing.GroupLayout jPanel_enkripsi_RSACRTLayout = new javax.swing.GroupLayout(jPanel_enkripsi_RSACRT);
        jPanel_enkripsi_RSACRT.setLayout(jPanel_enkripsi_RSACRTLayout);
        jPanel_enkripsi_RSACRTLayout.setHorizontalGroup(
            jPanel_enkripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_enkripsi_RSACRTLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_enkripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel_enkripsi_RSACRTLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel_enkripsiField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel_enkripsi_RSACRTLayout.setVerticalGroup(
            jPanel_enkripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_RSACRTLayout.createSequentialGroup()
                .addComponent(jLabel_enkripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel_enkripsiField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLayeredPane_enkripsi_RSACRT.setLayer(jPanel_enkripsi_RSACRT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_enkripsi_RSACRTLayout = new javax.swing.GroupLayout(jLayeredPane_enkripsi_RSACRT);
        jLayeredPane_enkripsi_RSACRT.setLayout(jLayeredPane_enkripsi_RSACRTLayout);
        jLayeredPane_enkripsi_RSACRTLayout.setHorizontalGroup(
            jLayeredPane_enkripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_enkripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_enkripsi_RSACRTLayout.setVerticalGroup(
            jLayeredPane_enkripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane_enkripsi_RSACRTLayout.createSequentialGroup()
                .addComponent(jPanel_enkripsi_RSACRT, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel_dekripsi_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsi_RSACRT.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_dekripsi_RSACRT.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_dekripsi_RSACRT.setForeground(java.awt.Color.white);
        jLabel_dekripsi_RSACRT.setText("RSA-CRT Decryption");

        jPanel_dekripsiField_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsiField_RSACRT.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_dekripsiField_RSACRT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_privateKey_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_privateKey_RSACRT.setForeground(java.awt.Color.white);
        jLabel_privateKey_RSACRT.setText("Private Key  :");
        jPanel_dekripsiField_RSACRT.add(jLabel_privateKey_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 110, 30));

        jLabel_browseFile_dekripsi_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_dekripsi_RSACRT.setForeground(java.awt.Color.white);
        jLabel_browseFile_dekripsi_RSACRT.setText("Choose File  :");
        jPanel_dekripsiField_RSACRT.add(jLabel_browseFile_dekripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 110, 32));

        jTextField_cipherTeks1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_cipherTeks1ActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSACRT.add(jTextField_cipherTeks1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 265, 32));

        jTextField_RSACRT_privateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_RSACRT_privateKeyActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSACRT.add(jTextField_RSACRT_privateKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 265, 32));
        jTextField_RSACRT_privateKey.setEditable(false);

        jButton_browseCiphertext_RSACRT.setText("Browse");
        jButton_browseCiphertext_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseCiphertext_RSACRTActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSACRT.add(jButton_browseCiphertext_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 90, 30));

        jButton_browsePrivatekey_RSACRT.setText("Browse");
        jButton_browsePrivatekey_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePrivatekey_RSACRTActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSACRT.add(jButton_browsePrivatekey_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 90, 30));

        jLabel_cipherteks_RSACRT_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_cipherteks_RSACRT_dekripsi.setForeground(java.awt.Color.white);
        jLabel_cipherteks_RSACRT_dekripsi.setText("Ciphertext  :");
        jPanel_dekripsiField_RSACRT.add(jLabel_cipherteks_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 98, 32));

        jLabel_processingTime_RSACRT_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RSACRT_dekripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RSACRT_dekripsi.setText("Processing Time :");
        jPanel_dekripsiField_RSACRT.add(jLabel_processingTime_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, 98, 20));

        jButton_dekripsi_RSACRT.setText("Decrypt");
        jButton_dekripsi_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_dekripsi_RSACRTActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSACRT.add(jButton_dekripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 330, 90, 30));

        jLabel1_plainteks_RSACRT_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_plainteks_RSACRT_dekripsi.setForeground(java.awt.Color.white);
        jLabel1_plainteks_RSACRT_dekripsi.setText("Plaintext  :");
        jPanel_dekripsiField_RSACRT.add(jLabel1_plainteks_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, 98, 32));
        jPanel_dekripsiField_RSACRT.add(jTextField_processingTime_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 190, -1));
        jTextField_processingTime_RSACRT_dekripsi.setEditable(false);

        jTextArea_cipherText_dekripsi_RSACRT.setColumns(20);
        jTextArea_cipherText_dekripsi_RSACRT.setRows(5);
        jScrollPane_cipherText_dekripsi_RSACRT.setViewportView(jTextArea_cipherText_dekripsi_RSACRT);

        jPanel_dekripsiField_RSACRT.add(jScrollPane_cipherText_dekripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 340, 140));

        jTextArea_plainText_dekripsi_RSACRT.setColumns(20);
        jTextArea_plainText_dekripsi_RSACRT.setRows(5);
        jScrollPane_plainText_dekripsi_RSACRT.setViewportView(jTextArea_plainText_dekripsi_RSACRT);
        jTextArea_plainText_dekripsi_RSACRT.setEditable(false);

        jPanel_dekripsiField_RSACRT.add(jScrollPane_plainText_dekripsi_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 350, 140));

        javax.swing.GroupLayout jPanel_dekripsi_RSACRTLayout = new javax.swing.GroupLayout(jPanel_dekripsi_RSACRT);
        jPanel_dekripsi_RSACRT.setLayout(jPanel_dekripsi_RSACRTLayout);
        jPanel_dekripsi_RSACRTLayout.setHorizontalGroup(
            jPanel_dekripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_dekripsi_RSACRTLayout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addComponent(jLabel_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel_dekripsi_RSACRTLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jPanel_dekripsiField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_dekripsi_RSACRTLayout.setVerticalGroup(
            jPanel_dekripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_dekripsi_RSACRTLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_dekripsiField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jLayeredPane_dekripsi_RSACRT.setLayer(jPanel_dekripsi_RSACRT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_dekripsi_RSACRTLayout = new javax.swing.GroupLayout(jLayeredPane_dekripsi_RSACRT);
        jLayeredPane_dekripsi_RSACRT.setLayout(jLayeredPane_dekripsi_RSACRTLayout);
        jLayeredPane_dekripsi_RSACRTLayout.setHorizontalGroup(
            jLayeredPane_dekripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_dekripsi_RSACRTLayout.setVerticalGroup(
            jLayeredPane_dekripsi_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane_dekripsi_RSACRTLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jLayeredPane_avalancheEffect_RSACRT.setPreferredSize(new java.awt.Dimension(1004, 480));

        jPanel_avalancheEffect_RSACRT.setBackground(new java.awt.Color(100, 149, 237));

        jPanel__avalancheEffect_RSACRT_Form.setBackground(new java.awt.Color(100, 149, 237));
        jPanel__avalancheEffect_RSACRT_Form.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSACRT_Form.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel__avalancheEffect_RSACRT_Form.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_plaintext1_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_plaintext1_avalancheEffect_RSACRT.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_plaintext1_avalancheEffect_RSACRT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_plaintext1_avalancheEffect_RSACRT.setText("Plaintext");
        jLabel_plaintext1_avalancheEffect_RSACRT.setToolTipText("P");
        jLabel_plaintext1_avalancheEffect_RSACRT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSACRT_Form.add(jLabel_plaintext1_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 100, 30));

        jLabel_result_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_result_avalancheEffect_RSACRT.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_result_avalancheEffect_RSACRT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_result_avalancheEffect_RSACRT.setText("Result :");
        jLabel_result_avalancheEffect_RSACRT.setToolTipText("N");
        jPanel__avalancheEffect_RSACRT_Form.add(jLabel_result_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 50, 30));

        jTextField_N_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_N_avalancheEffect_RSACRT.setToolTipText("N field");
        jTextField_N_avalancheEffect_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_N_avalancheEffect_RSACRTActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSACRT_Form.add(jTextField_N_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 440, 30));
        jTextField_N_avalancheEffect_RSACRT.setEditable(false);

        jTextField_E_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_E_avalancheEffect_RSACRT.setToolTipText("D field");
        jTextField_E_avalancheEffect_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_E_avalancheEffect_RSACRTActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSACRT_Form.add(jTextField_E_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 440, 30));
        jTextField_E_avalancheEffect_RSACRT.setEditable(false);

        jButton_calculate_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_calculate_avalancheEffect_RSACRT.setText("Calculate");
        jButton_calculate_avalancheEffect_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calculate_avalancheEffect_RSACRTActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSACRT_Form.add(jButton_calculate_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, -1, -1));

        jButton_browseKey_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browseKey_avalancheEffect_RSACRT.setText("Browse");
        jButton_browseKey_avalancheEffect_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseKey_avalancheEffect_RSACRTActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSACRT_Form.add(jButton_browseKey_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 80, -1));

        jLabel_key_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_key_avalancheEffect_RSACRT.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_key_avalancheEffect_RSACRT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_key_avalancheEffect_RSACRT.setText("Key");
        jLabel_key_avalancheEffect_RSACRT.setToolTipText("N");
        jLabel_key_avalancheEffect_RSACRT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSACRT_Form.add(jLabel_key_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, 30));

        jLabel_N_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_N_avalancheEffect_RSACRT.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_N_avalancheEffect_RSACRT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_N_avalancheEffect_RSACRT.setText("N");
        jLabel_N_avalancheEffect_RSACRT.setToolTipText("N");
        jPanel__avalancheEffect_RSACRT_Form.add(jLabel_N_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 20, 30));

        jLabel_E_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_E_avalancheEffect_RSACRT.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_E_avalancheEffect_RSACRT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_E_avalancheEffect_RSACRT.setText("E");
        jLabel_E_avalancheEffect_RSACRT.setToolTipText("N");
        jPanel__avalancheEffect_RSACRT_Form.add(jLabel_E_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 20, 30));

        jTextArea_avalancheEffect_RSACRT.setColumns(20);
        jTextArea_avalancheEffect_RSACRT.setRows(5);
        jScrollPane_avalancheEffect_RSACRT.setViewportView(jTextArea_avalancheEffect_RSACRT);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RSACRT_Form.add(jScrollPane_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 640, 150));

        jTextArea_plaintext1_avalancheEffect_RSACRT.setColumns(20);
        jTextArea_plaintext1_avalancheEffect_RSACRT.setRows(5);
        jScrollPane_avalancheEffect_RC4A4.setViewportView(jTextArea_plaintext1_avalancheEffect_RSACRT);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RSACRT_Form.add(jScrollPane_avalancheEffect_RC4A4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 440, 70));

        jButton_browsePlaintext1_avalancheEffect_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browsePlaintext1_avalancheEffect_RSACRT.setText("Browse");
        jButton_browsePlaintext1_avalancheEffect_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext1_avalancheEffect_RSACRTActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSACRT_Form.add(jButton_browsePlaintext1_avalancheEffect_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, -1, -1));

        jLabel_generateKey_RSACRT2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_generateKey_RSACRT2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_generateKey_RSACRT2.setText("Avalanche Effect RSA-CRT");
        jLabel_generateKey_RSACRT2.setToolTipText("P");

        javax.swing.GroupLayout jPanel_avalancheEffect_RSACRTLayout = new javax.swing.GroupLayout(jPanel_avalancheEffect_RSACRT);
        jPanel_avalancheEffect_RSACRT.setLayout(jPanel_avalancheEffect_RSACRTLayout);
        jPanel_avalancheEffect_RSACRTLayout.setHorizontalGroup(
            jPanel_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RSACRTLayout.createSequentialGroup()
                .addContainerGap(364, Short.MAX_VALUE)
                .addComponent(jLabel_generateKey_RSACRT2)
                .addGap(378, 378, 378))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RSACRTLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel__avalancheEffect_RSACRT_Form, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_avalancheEffect_RSACRTLayout.setVerticalGroup(
            jPanel_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_avalancheEffect_RSACRTLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel_generateKey_RSACRT2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel__avalancheEffect_RSACRT_Form, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        jLayeredPane_avalancheEffect_RSACRT.setLayer(jPanel_avalancheEffect_RSACRT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_avalancheEffect_RSACRTLayout = new javax.swing.GroupLayout(jLayeredPane_avalancheEffect_RSACRT);
        jLayeredPane_avalancheEffect_RSACRT.setLayout(jLayeredPane_avalancheEffect_RSACRTLayout);
        jLayeredPane_avalancheEffect_RSACRTLayout.setHorizontalGroup(
            jLayeredPane_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1004, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RSACRT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane_avalancheEffect_RSACRTLayout.setVerticalGroup(
            jLayeredPane_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffect_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RSACRT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_RSACRTLayout = new javax.swing.GroupLayout(jPanel_RSACRT);
        jPanel_RSACRT.setLayout(jPanel_RSACRTLayout);
        jPanel_RSACRTLayout.setHorizontalGroup(
            jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSACRTLayout.createSequentialGroup()
                .addContainerGap(833, Short.MAX_VALUE)
                .addComponent(jComboBox_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_RSACRT_option)
                .addContainerGap())
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane_enkripsi_RSACRT, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSACRTLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_RSACRTLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane_avalancheEffect_RSACRT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel_RSACRTLayout.setVerticalGroup(
            jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RSACRTLayout.createSequentialGroup()
                .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_RSACRT_option)
                    .addComponent(jComboBox_RSACRT))
                .addGap(489, 489, 489))
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSACRTLayout.createSequentialGroup()
                    .addContainerGap(19, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_enkripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(28, 28, 28)))
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSACRTLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(27, Short.MAX_VALUE)))
            .addGroup(jPanel_RSACRTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSACRTLayout.createSequentialGroup()
                    .addContainerGap(20, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_avalancheEffect_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(24, 24, 24)))
        );

        jLayeredPane_RSACRT.add(jPanel_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 490));

        getContentPane().add(jLayeredPane_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 490));

        jLayeredPane_RSA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_RSA.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_RSA.setPreferredSize(new java.awt.Dimension(1004, 480));

        jButton_RSA.setText("Go");
        jButton_RSA.setToolTipText("");
        jButton_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RSAActionPerformed(evt);
            }
        });

        jComboBox_RSA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypt", "Decrypt", "Avalanche Effect" }));
        jComboBox_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_RSAActionPerformed(evt);
            }
        });

        jPanel_enkripsi_RSA.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsi_RSA.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_enkripsi_RSA.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_enkripsi_RSA.setForeground(java.awt.Color.white);
        jLabel_enkripsi_RSA.setText("RSA Encryption");

        jPanel_enkripsiField_RSA.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsiField_RSA.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_enkripsiField_RSA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("N");
        jPanel_enkripsiField_RSA.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, 32));

        jLabel_publicKey_RSA.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_publicKey_RSA.setForeground(java.awt.Color.white);
        jLabel_publicKey_RSA.setText("Public Key    :");
        jPanel_enkripsiField_RSA.add(jLabel_publicKey_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        jLabel_browseFile_enkripsi_RSA.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_enkripsi_RSA.setForeground(java.awt.Color.white);
        jLabel_browseFile_enkripsi_RSA.setText("Choose File  :");
        jPanel_enkripsiField_RSA.add(jLabel_browseFile_enkripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 36, 98, 20));

        jLabel1_E_publicKey_RSA.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_E_publicKey_RSA.setForeground(java.awt.Color.white);
        jLabel1_E_publicKey_RSA.setText("E");
        jPanel_enkripsiField_RSA.add(jLabel1_E_publicKey_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, 32));

        jTextField_E_publicKeyRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_E_publicKeyRSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jTextField_E_publicKeyRSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, 280, 32));
        jTextField_E_publicKeyRSA.setEditable(false);

        jTextField_plainTeks_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_plainTeks_RSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jTextField_plainTeks_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 280, 32));
        jTextField_plainTeks_RSA.setEditable(false);

        jTextField_N_publicKeyRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_N_publicKeyRSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jTextField_N_publicKeyRSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 280, 32));
        jTextField_N_publicKeyRSA.setEditable(false);

        jButton_browsePlaintext_RSA.setText("Browse");
        jButton_browsePlaintext_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext_RSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jButton_browsePlaintext_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 30, 110, 30));

        jButton_GenerateKey_RSA.setText("Generate Key");
        jButton_GenerateKey_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GenerateKey_RSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jButton_GenerateKey_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, 110, 30));

        jLabel_plainteks_RSA_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_plainteks_RSA_enkripsi.setForeground(java.awt.Color.white);
        jLabel_plainteks_RSA_enkripsi.setText("Plaintext  :");
        jPanel_enkripsiField_RSA.add(jLabel_plainteks_RSA_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 98, 32));

        jLabel_processingTime_RSA_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RSA_enkripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RSA_enkripsi.setText("Processing Time :");
        jPanel_enkripsiField_RSA.add(jLabel_processingTime_RSA_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 340, 98, -1));

        jLabel1_cipherteks_RSA_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_cipherteks_RSA_enkripsi.setForeground(java.awt.Color.white);
        jLabel1_cipherteks_RSA_enkripsi.setText("Ciphertext  :");
        jPanel_enkripsiField_RSA.add(jLabel1_cipherteks_RSA_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 170, 98, 32));

        jTextField_processingTime_RSA_enkripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_processingTime_RSA_enkripsiActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jTextField_processingTime_RSA_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 330, 180, -1));
        jTextField_processingTime_RSA_enkripsi.setEditable(false);

        jButton_enkripsi_RSA.setText("Encrypt");
        jButton_enkripsi_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_enkripsi_RSAActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RSA.add(jButton_enkripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 90, 30));

        jTextArea_plainText_enkripsi_RSA.setColumns(20);
        jTextArea_plainText_enkripsi_RSA.setRows(5);
        jScrollPane_plainText_enkripsi_RSA.setViewportView(jTextArea_plainText_enkripsi_RSA);

        jPanel_enkripsiField_RSA.add(jScrollPane_plainText_enkripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 350, 110));

        jTextArea_cipherText_enkripsi_RSA.setColumns(20);
        jTextArea_cipherText_enkripsi_RSA.setRows(5);
        jScrollPane_cipherText_enkripsi_RSA.setViewportView(jTextArea_cipherText_enkripsi_RSA);
        jTextArea_cipherText_enkripsi_RSA.setEditable(false);

        jPanel_enkripsiField_RSA.add(jScrollPane_cipherText_enkripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 350, 110));

        javax.swing.GroupLayout jPanel_enkripsi_RSALayout = new javax.swing.GroupLayout(jPanel_enkripsi_RSA);
        jPanel_enkripsi_RSA.setLayout(jPanel_enkripsi_RSALayout);
        jPanel_enkripsi_RSALayout.setHorizontalGroup(
            jPanel_enkripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_enkripsi_RSALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_enkripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel_enkripsi_RSALayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel_enkripsiField_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel_enkripsi_RSALayout.setVerticalGroup(
            jPanel_enkripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_RSALayout.createSequentialGroup()
                .addComponent(jLabel_enkripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel_enkripsiField_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLayeredPane_enkripsi_RSA.setLayer(jPanel_enkripsi_RSA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_enkripsi_RSALayout = new javax.swing.GroupLayout(jLayeredPane_enkripsi_RSA);
        jLayeredPane_enkripsi_RSA.setLayout(jLayeredPane_enkripsi_RSALayout);
        jLayeredPane_enkripsi_RSALayout.setHorizontalGroup(
            jLayeredPane_enkripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_enkripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_enkripsi_RSALayout.setVerticalGroup(
            jLayeredPane_enkripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane_enkripsi_RSALayout.createSequentialGroup()
                .addComponent(jPanel_enkripsi_RSA, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel_dekripsi_RSA.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsi_RSA.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_dekripsi_RSA.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_dekripsi_RSA.setForeground(java.awt.Color.white);
        jLabel_dekripsi_RSA.setText("RSA Decryption");

        jPanel_dekripsiField_RSA.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsiField_RSA.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_dekripsiField_RSA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_privateKey_RSA.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_privateKey_RSA.setForeground(java.awt.Color.white);
        jLabel_privateKey_RSA.setText("Private Key  :");
        jPanel_dekripsiField_RSA.add(jLabel_privateKey_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 110, 30));

        jLabel_browseFile_dekripsi_RSA.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_dekripsi_RSA.setForeground(java.awt.Color.white);
        jLabel_browseFile_dekripsi_RSA.setText("Choose File  :");
        jPanel_dekripsiField_RSA.add(jLabel_browseFile_dekripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 110, 32));

        jTextField_cipherTeksRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_cipherTeksRSAActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSA.add(jTextField_cipherTeksRSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 265, 32));
        jTextField_cipherTeksRSA.setEditable(false);

        jTextField_RSA_privateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_RSA_privateKeyActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSA.add(jTextField_RSA_privateKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 265, 32));
        jTextField_RSACRT_privateKey.setEditable(false);

        jButton_browseCiphertext_RSA.setText("Browse");
        jButton_browseCiphertext_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseCiphertext_RSAActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSA.add(jButton_browseCiphertext_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 90, 30));

        jButton_browsePrivatekey_RSA.setText("Browse");
        jButton_browsePrivatekey_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePrivatekey_RSAActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSA.add(jButton_browsePrivatekey_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 90, 30));

        jLabel_cipherteks_RSA_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_cipherteks_RSA_dekripsi.setForeground(java.awt.Color.white);
        jLabel_cipherteks_RSA_dekripsi.setText("Ciphertext  :");
        jPanel_dekripsiField_RSA.add(jLabel_cipherteks_RSA_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 98, 32));

        jLabel_processingTime_RSA_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RSA_dekripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RSA_dekripsi.setText("Processing Time :");
        jPanel_dekripsiField_RSA.add(jLabel_processingTime_RSA_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, 98, 20));

        jButton_dekripsi_RSA.setText("Decrypt");
        jButton_dekripsi_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_dekripsi_RSAActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RSA.add(jButton_dekripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 330, 90, 30));

        jLabel1_plainteks_RSA_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1_plainteks_RSA_dekripsi.setForeground(java.awt.Color.white);
        jLabel1_plainteks_RSA_dekripsi.setText("Plaintext  :");
        jPanel_dekripsiField_RSA.add(jLabel1_plainteks_RSA_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, 98, 32));
        jPanel_dekripsiField_RSA.add(jTextField_processingTime_RSA_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 190, -1));
        jTextField_processingTime_RSA_dekripsi.setEditable(false);

        jTextArea_cipherText_dekripsi_RSA.setColumns(20);
        jTextArea_cipherText_dekripsi_RSA.setRows(5);
        jScrollPane_cipherText_dekripsi_RSA.setViewportView(jTextArea_cipherText_dekripsi_RSA);

        jPanel_dekripsiField_RSA.add(jScrollPane_cipherText_dekripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 340, 140));

        jTextArea_plainText_dekripsi_RSA.setColumns(20);
        jTextArea_plainText_dekripsi_RSA.setRows(5);
        jScrollPane_plainText_dekripsi_RSA.setViewportView(jTextArea_plainText_dekripsi_RSA);
        jTextArea_plainText_dekripsi_RSA.setEditable(false);

        jPanel_dekripsiField_RSA.add(jScrollPane_plainText_dekripsi_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 350, 140));

        javax.swing.GroupLayout jPanel_dekripsi_RSALayout = new javax.swing.GroupLayout(jPanel_dekripsi_RSA);
        jPanel_dekripsi_RSA.setLayout(jPanel_dekripsi_RSALayout);
        jPanel_dekripsi_RSALayout.setHorizontalGroup(
            jPanel_dekripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_dekripsi_RSALayout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addComponent(jLabel_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel_dekripsi_RSALayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jPanel_dekripsiField_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_dekripsi_RSALayout.setVerticalGroup(
            jPanel_dekripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_dekripsi_RSALayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_dekripsiField_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jLayeredPane_dekripsi_RSA.setLayer(jPanel_dekripsi_RSA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_dekripsi_RSALayout = new javax.swing.GroupLayout(jLayeredPane_dekripsi_RSA);
        jLayeredPane_dekripsi_RSA.setLayout(jLayeredPane_dekripsi_RSALayout);
        jLayeredPane_dekripsi_RSALayout.setHorizontalGroup(
            jLayeredPane_dekripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_dekripsi_RSALayout.setVerticalGroup(
            jLayeredPane_dekripsi_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane_dekripsi_RSALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jLayeredPane_avalancheEffect.setPreferredSize(new java.awt.Dimension(1004, 480));

        jPanel_avalancheEffect_RSA.setBackground(new java.awt.Color(100, 149, 237));

        jPanel__avalancheEffect_RSA_Form.setBackground(new java.awt.Color(100, 149, 237));
        jPanel__avalancheEffect_RSA_Form.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSA_Form.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel__avalancheEffect_RSA_Form.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_result_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_result_avalancheEffect_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_result_avalancheEffect_RSA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_result_avalancheEffect_RSA.setText("Result :");
        jLabel_result_avalancheEffect_RSA.setToolTipText("N");
        jPanel__avalancheEffect_RSA_Form.add(jLabel_result_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 50, 30));

        jTextField_N_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_N_avalancheEffect_RSA.setToolTipText("N field");
        jTextField_N_avalancheEffect_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_N_avalancheEffect_RSAActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSA_Form.add(jTextField_N_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 440, 30));
        jTextField_N_avalancheEffect_RSA.setEditable(false);

        jTextField_E_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_E_avalancheEffect_RSA.setToolTipText("D field");
        jTextField_E_avalancheEffect_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_E_avalancheEffect_RSAActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSA_Form.add(jTextField_E_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 440, 30));
        jTextField_E_avalancheEffect_RSA.setEditable(false);

        jButton_calculate_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_calculate_avalancheEffect_RSA.setText("Calculate");
        jButton_calculate_avalancheEffect_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calculate_avalancheEffect_RSAActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSA_Form.add(jButton_calculate_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, -1, -1));

        jButton_browseKey_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browseKey_avalancheEffect_RSA.setText("Browse");
        jButton_browseKey_avalancheEffect_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseKey_avalancheEffect_RSAActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSA_Form.add(jButton_browseKey_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 80, -1));

        jLabel_key_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_key_avalancheEffect_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_key_avalancheEffect_RSA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_key_avalancheEffect_RSA.setText("Key");
        jLabel_key_avalancheEffect_RSA.setToolTipText("N");
        jLabel_key_avalancheEffect_RSA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSA_Form.add(jLabel_key_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, 30));

        jLabel_N_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_N_avalancheEffect_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_N_avalancheEffect_RSA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_N_avalancheEffect_RSA.setText("N");
        jLabel_N_avalancheEffect_RSA.setToolTipText("N");
        jPanel__avalancheEffect_RSA_Form.add(jLabel_N_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 20, 30));

        jLabel_E_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_E_avalancheEffect_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_E_avalancheEffect_RSA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_E_avalancheEffect_RSA.setText("E");
        jLabel_E_avalancheEffect_RSA.setToolTipText("N");
        jPanel__avalancheEffect_RSA_Form.add(jLabel_E_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 20, 30));

        jTextArea_avalancheEffect_RSA.setColumns(20);
        jTextArea_avalancheEffect_RSA.setRows(5);
        jScrollPane_avalancheEffect_RSA.setViewportView(jTextArea_avalancheEffect_RSA);
        jTextArea_avalancheEffect_RSA.setEditable(false);

        jPanel__avalancheEffect_RSA_Form.add(jScrollPane_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 194, 640, 160));

        jLabel_plaintext1_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_plaintext1_avalancheEffect_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_plaintext1_avalancheEffect_RSA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_plaintext1_avalancheEffect_RSA.setText("Plaintext");
        jLabel_plaintext1_avalancheEffect_RSA.setToolTipText("P");
        jLabel_plaintext1_avalancheEffect_RSA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RSA_Form.add(jLabel_plaintext1_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 100, 30));

        jButton_browsePlaintext1_avalancheEffect_RSA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browsePlaintext1_avalancheEffect_RSA.setText("Browse");
        jButton_browsePlaintext1_avalancheEffect_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext1_avalancheEffect_RSAActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RSA_Form.add(jButton_browsePlaintext1_avalancheEffect_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, -1, -1));

        jTextArea_plaintext1_avalancheEffect_RSA.setColumns(20);
        jTextArea_plaintext1_avalancheEffect_RSA.setRows(5);
        jScrollPane_avalancheEffect_RC4A6.setViewportView(jTextArea_plaintext1_avalancheEffect_RSA);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RSA_Form.add(jScrollPane_avalancheEffect_RC4A6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 440, 70));

        jLabel_generateKey_RSA.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_generateKey_RSA.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_generateKey_RSA.setText("Avalanche Effect RSA");
        jLabel_generateKey_RSA.setToolTipText("P");

        javax.swing.GroupLayout jPanel_avalancheEffect_RSALayout = new javax.swing.GroupLayout(jPanel_avalancheEffect_RSA);
        jPanel_avalancheEffect_RSA.setLayout(jPanel_avalancheEffect_RSALayout);
        jPanel_avalancheEffect_RSALayout.setHorizontalGroup(
            jPanel_avalancheEffect_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RSALayout.createSequentialGroup()
                .addContainerGap(364, Short.MAX_VALUE)
                .addComponent(jLabel_generateKey_RSA)
                .addGap(378, 378, 378))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RSALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel__avalancheEffect_RSA_Form, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_avalancheEffect_RSALayout.setVerticalGroup(
            jPanel_avalancheEffect_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_avalancheEffect_RSALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel_generateKey_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel__avalancheEffect_RSA_Form, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        jLayeredPane_avalancheEffect.setLayer(jPanel_avalancheEffect_RSA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_avalancheEffectLayout = new javax.swing.GroupLayout(jLayeredPane_avalancheEffect);
        jLayeredPane_avalancheEffect.setLayout(jLayeredPane_avalancheEffectLayout);
        jLayeredPane_avalancheEffectLayout.setHorizontalGroup(
            jLayeredPane_avalancheEffectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1004, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RSA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane_avalancheEffectLayout.setVerticalGroup(
            jLayeredPane_avalancheEffectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RSA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_RSALayout = new javax.swing.GroupLayout(jPanel_RSA);
        jPanel_RSA.setLayout(jPanel_RSALayout);
        jPanel_RSALayout.setHorizontalGroup(
            jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSALayout.createSequentialGroup()
                .addContainerGap(833, Short.MAX_VALUE)
                .addComponent(jComboBox_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_RSA)
                .addContainerGap())
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane_enkripsi_RSA, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSALayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_RSALayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane_avalancheEffect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel_RSALayout.setVerticalGroup(
            jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RSALayout.createSequentialGroup()
                .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_RSA)
                    .addComponent(jComboBox_RSA))
                .addGap(489, 489, 489))
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSALayout.createSequentialGroup()
                    .addContainerGap(18, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_enkripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(28, 28, 28)))
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSALayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RSA, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(26, Short.MAX_VALUE)))
            .addGroup(jPanel_RSALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RSALayout.createSequentialGroup()
                    .addContainerGap(20, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_avalancheEffect, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(24, 24, 24)))
        );

        jLayeredPane_RSA.add(jPanel_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 490));

        getContentPane().add(jLayeredPane_RSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 490));

        jLayeredPane_RC4A.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_RC4A.setPreferredSize(new java.awt.Dimension(1004, 480));

        jButton_RC4A_option.setText("Go");
        jButton_RC4A_option.setToolTipText("");
        jButton_RC4A_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RC4A_optionActionPerformed(evt);
            }
        });

        jComboBox_RC4A.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypt", "Decrypt", "Avalanche Effect" }));
        jComboBox_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_RC4AActionPerformed(evt);
            }
        });

        jPanel_enkripsi_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsi_RC4A.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_enkripsi_RC4A.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_enkripsi_RC4A.setForeground(java.awt.Color.white);
        jLabel_enkripsi_RC4A.setText("RC4A Encryption");

        jPanel_enkripsiField_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsiField_RC4A.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_enkripsiField_RC4A.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Key_RC4A.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_Key_RC4A.setForeground(java.awt.Color.white);
        jLabel_Key_RC4A.setText("Key             :");
        jPanel_enkripsiField_RC4A.add(jLabel_Key_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 80, 106, -1));

        jLabel_browseFile_enkripsi_RC4A.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_enkripsi_RC4A.setForeground(java.awt.Color.white);
        jLabel_browseFile_enkripsi_RC4A.setText("Choose File  :");
        jPanel_enkripsiField_RC4A.add(jLabel_browseFile_enkripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 24, 98, 32));

        jTextField_plainTeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_plainTeksActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RC4A.add(jTextField_plainTeks, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 26, 265, 32));
        jTextField_plainTeks.setEditable(false);
        jPanel_enkripsiField_RC4A.add(jTextField_key_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 77, 265, 32));

        jButton_browsePlaintext_RC4A.setText("Browse");
        jButton_browsePlaintext_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext_RC4AActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RC4A.add(jButton_browsePlaintext_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 24, 79, 35));

        jLabel_plainteks_RC4A_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_plainteks_RC4A_enkripsi.setForeground(java.awt.Color.white);
        jLabel_plainteks_RC4A_enkripsi.setText("Plaintext  :");
        jPanel_enkripsiField_RC4A.add(jLabel_plainteks_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 98, 32));

        jLabel_processingTime_RC4A_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RC4A_enkripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RC4A_enkripsi.setText("Processing Time :");
        jPanel_enkripsiField_RC4A.add(jLabel_processingTime_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, 98, 20));

        jButton_enkripsi_RC4A.setText("Encrypt");
        jButton_enkripsi_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_enkripsi_RC4AActionPerformed(evt);
            }
        });
        jPanel_enkripsiField_RC4A.add(jButton_enkripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, 77, 30));

        jLabel_cipherteks_RC4A_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_cipherteks_RC4A_enkripsi.setForeground(java.awt.Color.white);
        jLabel_cipherteks_RC4A_enkripsi.setText("Ciphertext  :");
        jPanel_enkripsiField_RC4A.add(jLabel_cipherteks_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 98, 32));
        jPanel_enkripsiField_RC4A.add(jTextField_processingTime_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 320, 160, -1));
        jTextField_processingTime_RC4A_enkripsi.setEditable(false);

        jTextArea_cipherText_enkripsi_RC4A.setColumns(20);
        jTextArea_cipherText_enkripsi_RC4A.setRows(5);
        jScrollPane_cipherText_enkripsi_RC4A.setViewportView(jTextArea_cipherText_enkripsi_RC4A);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel_enkripsiField_RC4A.add(jScrollPane_cipherText_enkripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 350, 119));

        jTextArea_plainText_enkripsi_RC4A.setColumns(20);
        jTextArea_plainText_enkripsi_RC4A.setRows(5);
        jScrollPane_plainText_enkripsi_RC4A.setViewportView(jTextArea_plainText_enkripsi_RC4A);

        jPanel_enkripsiField_RC4A.add(jScrollPane_plainText_enkripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 350, 119));

        javax.swing.GroupLayout jPanel_enkripsi_RC4ALayout = new javax.swing.GroupLayout(jPanel_enkripsi_RC4A);
        jPanel_enkripsi_RC4A.setLayout(jPanel_enkripsi_RC4ALayout);
        jPanel_enkripsi_RC4ALayout.setHorizontalGroup(
            jPanel_enkripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_RC4ALayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jPanel_enkripsiField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_enkripsi_RC4ALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_enkripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel_enkripsi_RC4ALayout.setVerticalGroup(
            jPanel_enkripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_RC4ALayout.createSequentialGroup()
                .addComponent(jLabel_enkripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel_enkripsiField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jLayeredPane_enkripsi_RC4A.setLayer(jPanel_enkripsi_RC4A, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_enkripsi_RC4ALayout = new javax.swing.GroupLayout(jLayeredPane_enkripsi_RC4A);
        jLayeredPane_enkripsi_RC4A.setLayout(jLayeredPane_enkripsi_RC4ALayout);
        jLayeredPane_enkripsi_RC4ALayout.setHorizontalGroup(
            jLayeredPane_enkripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_enkripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_enkripsi_RC4ALayout.setVerticalGroup(
            jLayeredPane_enkripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane_enkripsi_RC4ALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_enkripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        jLayeredPane_dekripsi_RC4A.setPreferredSize(new java.awt.Dimension(1004, 480));

        jPanel_dekripsi_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsi_RC4A.setPreferredSize(new java.awt.Dimension(1004, 480));

        jLabel_dekripsi_RC4A.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_dekripsi_RC4A.setForeground(java.awt.Color.white);
        jLabel_dekripsi_RC4A.setText("RC4A Decryption");

        jPanel_dekripsiField_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsiField_RC4A.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_dekripsiField_RC4A.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Key_RC4A1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_Key_RC4A1.setForeground(java.awt.Color.white);
        jLabel_Key_RC4A1.setText("Key             :");
        jPanel_dekripsiField_RC4A.add(jLabel_Key_RC4A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 80, 106, -1));

        jLabel_browseFile_dekripsi_RC4A.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_browseFile_dekripsi_RC4A.setForeground(java.awt.Color.white);
        jLabel_browseFile_dekripsi_RC4A.setText("Choose File  :");
        jPanel_dekripsiField_RC4A.add(jLabel_browseFile_dekripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 24, 98, 32));

        jTextField_cipherTeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_cipherTeksActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RC4A.add(jTextField_cipherTeks, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 26, 265, 32));
        jTextField_cipherTeks.setEditable(false);
        jPanel_dekripsiField_RC4A.add(jTextField_key_RC4A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 77, 265, 32));

        jButton_browseciphertext_RC4A.setText("Browse");
        jButton_browseciphertext_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseciphertext_RC4AActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RC4A.add(jButton_browseciphertext_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 24, 79, 35));

        jLabel_cipherteks_RC4A_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_cipherteks_RC4A_dekripsi.setForeground(java.awt.Color.white);
        jLabel_cipherteks_RC4A_dekripsi.setText("Ciphertext  :");
        jPanel_dekripsiField_RC4A.add(jLabel_cipherteks_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, 98, 32));

        jLabel_processingTime_RC4A_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_RC4A_dekripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_RC4A_dekripsi.setText("Processing Time :");
        jPanel_dekripsiField_RC4A.add(jLabel_processingTime_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 98, 20));

        jButton_dekripsi_RC4A.setText("Decrypt");
        jButton_dekripsi_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_dekripsi_RC4AActionPerformed(evt);
            }
        });
        jPanel_dekripsiField_RC4A.add(jButton_dekripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 310, 77, 32));

        jLabel_plainteks_RC4A_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_plainteks_RC4A_dekripsi.setForeground(java.awt.Color.white);
        jLabel_plainteks_RC4A_dekripsi.setText("Plaintext  :");
        jPanel_dekripsiField_RC4A.add(jLabel_plainteks_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 98, 32));
        jPanel_dekripsiField_RC4A.add(jTextField_processingTime_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 310, 160, -1));

        jTextArea_plainText_dekripsi_RC4A.setColumns(20);
        jTextArea_plainText_dekripsi_RC4A.setRows(5);
        jScrollPane_plainText_dekripsi_RC4A.setViewportView(jTextArea_plainText_dekripsi_RC4A);
        jTextArea_plainText_dekripsi_RC4A.setEditable(false);

        jPanel_dekripsiField_RC4A.add(jScrollPane_plainText_dekripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 169, 350, 120));

        jTextArea_cipherText_dekripsi_RC4A.setColumns(20);
        jTextArea_cipherText_dekripsi_RC4A.setRows(5);
        jScrollPane_cipherText_dekripsi_RC4A.setViewportView(jTextArea_cipherText_dekripsi_RC4A);

        jPanel_dekripsiField_RC4A.add(jScrollPane_cipherText_dekripsi_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 346, 119));

        javax.swing.GroupLayout jPanel_dekripsi_RC4ALayout = new javax.swing.GroupLayout(jPanel_dekripsi_RC4A);
        jPanel_dekripsi_RC4A.setLayout(jPanel_dekripsi_RC4ALayout);
        jPanel_dekripsi_RC4ALayout.setHorizontalGroup(
            jPanel_dekripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_dekripsi_RC4ALayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jPanel_dekripsiField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_dekripsi_RC4ALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel_dekripsi_RC4ALayout.setVerticalGroup(
            jPanel_dekripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_dekripsi_RC4ALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_dekripsiField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jLayeredPane_dekripsi_RC4A.setLayer(jPanel_dekripsi_RC4A, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_dekripsi_RC4ALayout = new javax.swing.GroupLayout(jLayeredPane_dekripsi_RC4A);
        jLayeredPane_dekripsi_RC4A.setLayout(jLayeredPane_dekripsi_RC4ALayout);
        jLayeredPane_dekripsi_RC4ALayout.setHorizontalGroup(
            jLayeredPane_dekripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane_dekripsi_RC4ALayout.setVerticalGroup(
            jLayeredPane_dekripsi_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane_dekripsi_RC4ALayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLayeredPane_avalancheEffect_RC4A.setPreferredSize(new java.awt.Dimension(1004, 480));

        jPanel_avalancheEffect_RC4A.setBackground(new java.awt.Color(100, 149, 237));

        jPanel__avalancheEffect_RC4A_Form.setBackground(new java.awt.Color(100, 149, 237));
        jPanel__avalancheEffect_RC4A_Form.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RC4A_Form.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel__avalancheEffect_RC4A_Form.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_plaintext2_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_plaintext2_avalancheEffect_RC4A.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_plaintext2_avalancheEffect_RC4A.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_plaintext2_avalancheEffect_RC4A.setText("Plaintext 2");
        jLabel_plaintext2_avalancheEffect_RC4A.setToolTipText("Q");
        jLabel_plaintext2_avalancheEffect_RC4A.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RC4A_Form.add(jLabel_plaintext2_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, 30));

        jLabel_plaintext1_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_plaintext1_avalancheEffect_RC4A.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_plaintext1_avalancheEffect_RC4A.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_plaintext1_avalancheEffect_RC4A.setText("Plaintext 1");
        jLabel_plaintext1_avalancheEffect_RC4A.setToolTipText("P");
        jLabel_plaintext1_avalancheEffect_RC4A.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RC4A_Form.add(jLabel_plaintext1_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 100, 30));

        jLabel_result_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_result_avalancheEffect_RC4A.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_result_avalancheEffect_RC4A.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_result_avalancheEffect_RC4A.setText("Result :");
        jLabel_result_avalancheEffect_RC4A.setToolTipText("N");
        jPanel__avalancheEffect_RC4A_Form.add(jLabel_result_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 50, 30));

        jTextField_key_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_key_avalancheEffect_RC4A.setToolTipText("N field");
        jTextField_key_avalancheEffect_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_key_avalancheEffect_RC4AActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RC4A_Form.add(jTextField_key_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 460, 30));

        jLabel_key_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_key_avalancheEffect_RC4A.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_key_avalancheEffect_RC4A.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_key_avalancheEffect_RC4A.setText("Key");
        jLabel_key_avalancheEffect_RC4A.setToolTipText("N");
        jLabel_key_avalancheEffect_RC4A.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel__avalancheEffect_RC4A_Form.add(jLabel_key_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 100, 30));

        jTextArea_plainText2_avalancheEffect_RC4A.setColumns(20);
        jTextArea_plainText2_avalancheEffect_RC4A.setRows(5);
        jScrollPane_avalancheEffect_RC4A.setViewportView(jTextArea_plainText2_avalancheEffect_RC4A);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RC4A_Form.add(jScrollPane_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 460, 70));

        jButton_calculate_avalancheEffect_RC4A1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_calculate_avalancheEffect_RC4A1.setText("Calculate");
        jButton_calculate_avalancheEffect_RC4A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calculate_avalancheEffect_RC4A1ActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RC4A_Form.add(jButton_calculate_avalancheEffect_RC4A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, -1, -1));

        jTextArea_avalancheEffect_RC4A1.setColumns(20);
        jTextArea_avalancheEffect_RC4A1.setRows(5);
        jScrollPane_avalancheEffect_RC4A1.setViewportView(jTextArea_avalancheEffect_RC4A1);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RC4A_Form.add(jScrollPane_avalancheEffect_RC4A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 640, 110));

        jTextArea_plainText1_avalancheEffect_RC4A.setColumns(20);
        jTextArea_plainText1_avalancheEffect_RC4A.setRows(5);
        jScrollPane_avalancheEffect_RC4A2.setViewportView(jTextArea_plainText1_avalancheEffect_RC4A);
        jTextArea_cipherText_enkripsi_RC4A.setEditable(false);

        jPanel__avalancheEffect_RC4A_Form.add(jScrollPane_avalancheEffect_RC4A2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 460, 70));

        jButton_browsePlaintext1_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browsePlaintext1_avalancheEffect_RC4A.setText("Browse");
        jButton_browsePlaintext1_avalancheEffect_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext1_avalancheEffect_RC4AActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RC4A_Form.add(jButton_browsePlaintext1_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, -1, -1));

        jButton_browsePlaintext2_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_browsePlaintext2_avalancheEffect_RC4A.setText("Browse");
        jButton_browsePlaintext2_avalancheEffect_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext2_avalancheEffect_RC4AActionPerformed(evt);
            }
        });
        jPanel__avalancheEffect_RC4A_Form.add(jButton_browsePlaintext2_avalancheEffect_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, -1, -1));

        jLabel_avalancheEffect_RC4A.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel_avalancheEffect_RC4A.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_avalancheEffect_RC4A.setText("Avalanche Effect RC4A");
        jLabel_avalancheEffect_RC4A.setToolTipText("P");

        javax.swing.GroupLayout jPanel_avalancheEffect_RC4ALayout = new javax.swing.GroupLayout(jPanel_avalancheEffect_RC4A);
        jPanel_avalancheEffect_RC4A.setLayout(jPanel_avalancheEffect_RC4ALayout);
        jPanel_avalancheEffect_RC4ALayout.setHorizontalGroup(
            jPanel_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RC4ALayout.createSequentialGroup()
                .addContainerGap(399, Short.MAX_VALUE)
                .addComponent(jLabel_avalancheEffect_RC4A)
                .addGap(378, 378, 378))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_avalancheEffect_RC4ALayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel__avalancheEffect_RC4A_Form, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_avalancheEffect_RC4ALayout.setVerticalGroup(
            jPanel_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_avalancheEffect_RC4ALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel_avalancheEffect_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel__avalancheEffect_RC4A_Form, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jLayeredPane_avalancheEffect_RC4A.setLayer(jPanel_avalancheEffect_RC4A, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_avalancheEffect_RC4ALayout = new javax.swing.GroupLayout(jLayeredPane_avalancheEffect_RC4A);
        jLayeredPane_avalancheEffect_RC4A.setLayout(jLayeredPane_avalancheEffect_RC4ALayout);
        jLayeredPane_avalancheEffect_RC4ALayout.setHorizontalGroup(
            jLayeredPane_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1004, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RC4A, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane_avalancheEffect_RC4ALayout.setVerticalGroup(
            jLayeredPane_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
            .addGroup(jLayeredPane_avalancheEffect_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_avalancheEffect_RC4A, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_RC4ALayout = new javax.swing.GroupLayout(jPanel_RC4A);
        jPanel_RC4A.setLayout(jPanel_RC4ALayout);
        jPanel_RC4ALayout.setHorizontalGroup(
            jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RC4ALayout.createSequentialGroup()
                .addContainerGap(833, Short.MAX_VALUE)
                .addComponent(jComboBox_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_RC4A_option)
                .addContainerGap())
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane_enkripsi_RC4A, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RC4ALayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_RC4ALayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane_avalancheEffect_RC4A, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel_RC4ALayout.setVerticalGroup(
            jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_RC4ALayout.createSequentialGroup()
                .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_RC4A_option)
                    .addComponent(jComboBox_RC4A))
                .addContainerGap())
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RC4ALayout.createSequentialGroup()
                    .addContainerGap(20, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_enkripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(21, 21, 21)))
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RC4ALayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel_RC4ALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_RC4ALayout.createSequentialGroup()
                    .addContainerGap(13, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_avalancheEffect_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(21, 21, 21)))
        );

        jLayeredPane_RC4A.add(jPanel_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 490));

        getContentPane().add(jLayeredPane_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 490));

        jLayeredPane_Hybrid.setPreferredSize(new java.awt.Dimension(1024, 507));
        jLayeredPane_Hybrid.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_Hybrid.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_Hybrid.setPreferredSize(new java.awt.Dimension(1004, 480));

        jButton_Hybrid_option.setText("Go");
        jButton_Hybrid_option.setToolTipText("");
        jButton_Hybrid_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Hybrid_optionActionPerformed(evt);
            }
        });

        jComboBox_Hybrid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypt", "Decrypt" }));
        jComboBox_Hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_HybridActionPerformed(evt);
            }
        });

        jPanel_enkripsi_Hybrid.setBackground(new java.awt.Color(100, 149, 237));

        jPanel_enkripsiPlainteksField_RC4A.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsiPlainteksField_RC4A.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_enkripsiPlainteksField_RC4A.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Key_RC4A_enkripsi_hybrid.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_Key_RC4A_enkripsi_hybrid.setForeground(java.awt.Color.white);
        jLabel_Key_RC4A_enkripsi_hybrid.setText("RC4A Key  :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_Key_RC4A_enkripsi_hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 80, -1));

        jLabel_browseFile_enkripsi_hybrid_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_browseFile_enkripsi_hybrid_RC4A.setForeground(java.awt.Color.white);
        jLabel_browseFile_enkripsi_hybrid_RC4A.setText("Choose File      :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_browseFile_enkripsi_hybrid_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jTextField_plainTeks_hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_plainTeks_hybridActionPerformed(evt);
            }
        });
        jPanel_enkripsiPlainteksField_RC4A.add(jTextField_plainTeks_hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 190, -1));
        jTextField_plainTeks_hybrid.setEditable(false);
        jPanel_enkripsiPlainteksField_RC4A.add(jTextField_key_enkripsi_hybrid_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 210, -1));

        jButton_browsePlaintext_hybrid_RC4A.setText("Browse");
        jButton_browsePlaintext_hybrid_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsePlaintext_hybrid_RC4AActionPerformed(evt);
            }
        });
        jPanel_enkripsiPlainteksField_RC4A.add(jButton_browsePlaintext_hybrid_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jLabel_plainteks_hybrid_RC4A_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_plainteks_hybrid_RC4A_enkripsi.setForeground(java.awt.Color.white);
        jLabel_plainteks_hybrid_RC4A_enkripsi.setText("Plaintext  :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_plainteks_hybrid_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 98, -1));

        jLabel_processingTime_hybrid_enkripsi_plainTeks.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_hybrid_enkripsi_plainTeks.setForeground(java.awt.Color.white);
        jLabel_processingTime_hybrid_enkripsi_plainTeks.setText("Processing Time :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_processingTime_hybrid_enkripsi_plainTeks, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 340, 98, -1));

        jButton_enkripsi_hybrid_RC4A.setText("Encrypt");
        jButton_enkripsi_hybrid_RC4A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_enkripsi_hybrid_RC4AActionPerformed(evt);
            }
        });
        jPanel_enkripsiPlainteksField_RC4A.add(jButton_enkripsi_hybrid_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 77, -1));

        jLabel_cipherteks_hybrid_RC4A_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_cipherteks_hybrid_RC4A_enkripsi.setForeground(java.awt.Color.white);
        jLabel_cipherteks_hybrid_RC4A_enkripsi.setText("Ciphertext  :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_cipherteks_hybrid_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 307, -1));

        jTextField_processingTime_hybrid_RC4A_enkripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_processingTime_hybrid_RC4A_enkripsiActionPerformed(evt);
            }
        });
        jPanel_enkripsiPlainteksField_RC4A.add(jTextField_processingTime_hybrid_RC4A_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 340, 220, -1));
        jTextField_processingTime_hybrid_RC4A_enkripsi.setEditable(false);

        jTextArea_cipherText_enkripsi_hybridRC4A.setColumns(20);
        jTextArea_cipherText_enkripsi_hybridRC4A.setRows(5);
        jScrollPane_cipherText_enkripsi_hybridRC4A.setViewportView(jTextArea_cipherText_enkripsi_hybridRC4A);
        jTextArea_cipherText_enkripsi_hybridRC4A.setEditable(false);

        jPanel_enkripsiPlainteksField_RC4A.add(jScrollPane_cipherText_enkripsi_hybridRC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, 410, 100));

        jTextArea_plainText_enkripsi_hybridRC4A.setColumns(20);
        jTextArea_plainText_enkripsi_hybridRC4A.setRows(5);
        jScrollPane_plainText_enkripsi_hybridRC4A.setViewportView(jTextArea_plainText_enkripsi_hybridRC4A);

        jPanel_enkripsiPlainteksField_RC4A.add(jScrollPane_plainText_enkripsi_hybridRC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 400, 100));

        jLabel_Key_hybrid_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_Key_hybrid_RSACRT.setForeground(java.awt.Color.white);
        jLabel_Key_hybrid_RSACRT.setText("RSA-CRT Key   :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_Key_hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));
        jPanel_enkripsiPlainteksField_RC4A.add(jTextField_key_N_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 190, -1));
        jTextField_key_N_Hybrid_RSACRT.setEditable(false);

        jLabel_N_Key_Hybrid_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_N_Key_Hybrid_RSACRT.setForeground(java.awt.Color.white);
        jLabel_N_Key_Hybrid_RSACRT.setText("N");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_N_Key_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, -1));

        jLabel_E_Key_Hybrid_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_E_Key_Hybrid_RSACRT.setForeground(java.awt.Color.white);
        jLabel_E_Key_Hybrid_RSACRT.setText("E");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_E_Key_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));
        jPanel_enkripsiPlainteksField_RC4A.add(jTextField_E_key_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 210, -1));
        jTextField_E_key_Hybrid_RSACRT.setEditable(false);

        jButton_generate_RSACRT_Key_Hybrid.setText("Generate Key");
        jButton_generate_RSACRT_Key_Hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_generate_RSACRT_Key_HybridActionPerformed(evt);
            }
        });
        jPanel_enkripsiPlainteksField_RC4A.add(jButton_generate_RSACRT_Key_Hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 50, -1, -1));

        jLabel_cipherKey_Hybrid_RSACRT_enkripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_cipherKey_Hybrid_RSACRT_enkripsi.setForeground(java.awt.Color.white);
        jLabel_cipherKey_Hybrid_RSACRT_enkripsi.setText("RC4A Cipherkey  :");
        jPanel_enkripsiPlainteksField_RC4A.add(jLabel_cipherKey_Hybrid_RSACRT_enkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 120, -1));

        jTextArea_cipherKey_enkripsi_hybridRSACRT.setColumns(20);
        jTextArea_cipherKey_enkripsi_hybridRSACRT.setRows(5);
        jScrollPane_cipherKey_enkripsi_hybridRSACRT.setViewportView(jTextArea_cipherKey_enkripsi_hybridRSACRT);
        jTextArea_cipherKey_enkripsi_hybridRSACRT.setEditable(false);

        jPanel_enkripsiPlainteksField_RC4A.add(jScrollPane_cipherKey_enkripsi_hybridRSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 860, 90));

        jPanel_enkripsiKeyField_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_enkripsiKeyField_RSACRT.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_enkripsiKeyField_RSACRT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_enkripsi_HybridCryptosystem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel_enkripsi_HybridCryptosystem.setForeground(java.awt.Color.white);
        jLabel_enkripsi_HybridCryptosystem.setText("Hybrid Cryptosystem Encryption");

        javax.swing.GroupLayout jPanel_enkripsi_HybridLayout = new javax.swing.GroupLayout(jPanel_enkripsi_Hybrid);
        jPanel_enkripsi_Hybrid.setLayout(jPanel_enkripsi_HybridLayout);
        jPanel_enkripsi_HybridLayout.setHorizontalGroup(
            jPanel_enkripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_HybridLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jPanel_enkripsiPlainteksField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 894, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_enkripsi_HybridLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_enkripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_enkripsi_HybridLayout.createSequentialGroup()
                        .addComponent(jLabel_enkripsi_HybridCryptosystem, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109))
                    .addComponent(jPanel_enkripsiKeyField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );
        jPanel_enkripsi_HybridLayout.setVerticalGroup(
            jPanel_enkripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_enkripsi_HybridLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel_enkripsi_HybridCryptosystem, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_enkripsiPlainteksField_RC4A, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_enkripsiKeyField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane_enkripsi_Hybrid.setLayer(jPanel_enkripsi_Hybrid, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_enkripsi_HybridLayout = new javax.swing.GroupLayout(jLayeredPane_enkripsi_Hybrid);
        jLayeredPane_enkripsi_Hybrid.setLayout(jLayeredPane_enkripsi_HybridLayout);
        jLayeredPane_enkripsi_HybridLayout.setHorizontalGroup(
            jLayeredPane_enkripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_enkripsi_Hybrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jLayeredPane_enkripsi_HybridLayout.setVerticalGroup(
            jLayeredPane_enkripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_enkripsi_Hybrid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel_dekripsi_Hybrid.setBackground(new java.awt.Color(100, 149, 237));

        jPanel_dekripsiKeyField_RSACRT.setBackground(new java.awt.Color(100, 149, 237));
        jPanel_dekripsiKeyField_RSACRT.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        jPanel_dekripsiKeyField_RSACRT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Key_dekripsi_hybrid_RSACRT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_Key_dekripsi_hybrid_RSACRT.setForeground(java.awt.Color.white);
        jLabel_Key_dekripsi_hybrid_RSACRT.setText("RSA-CRT Key  :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_Key_dekripsi_hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));
        jPanel_dekripsiKeyField_RSACRT.add(jTextArea_cipherKey_dekripsi_hybridRSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 280, -1));

        jLabel_cipherKey_Hybrid_RSACRT_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_cipherKey_Hybrid_RSACRT_dekripsi.setForeground(java.awt.Color.white);
        jLabel_cipherKey_Hybrid_RSACRT_dekripsi.setText("RC4A Cipherkey  :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_cipherKey_Hybrid_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 120, -1));

        jLabel_processingTime_Hybrid_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel_processingTime_Hybrid_dekripsi.setForeground(java.awt.Color.white);
        jLabel_processingTime_Hybrid_dekripsi.setText("Processing Time :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_processingTime_Hybrid_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 340, 98, -1));

        jTextField_processingTime_Hybrid_dekripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_processingTime_Hybrid_dekripsiActionPerformed(evt);
            }
        });
        jPanel_dekripsiKeyField_RSACRT.add(jTextField_processingTime_Hybrid_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 340, 230, -1));
        jTextField_processingTime_Hybrid_dekripsi.setEditable(false);
        jPanel_dekripsiKeyField_RSACRT.add(jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 240, -1));
        jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT.setEditable(false);

        jButton_browse_RSACRT_privateKey_Hybrid.setText("Browse");
        jButton_browse_RSACRT_privateKey_Hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browse_RSACRT_privateKey_HybridActionPerformed(evt);
            }
        });
        jPanel_dekripsiKeyField_RSACRT.add(jButton_browse_RSACRT_privateKey_Hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, -1, -1));

        jTextArea_plainKey_dekripsi_hybridRSACRT.setColumns(20);
        jTextArea_plainKey_dekripsi_hybridRSACRT.setRows(5);
        jScrollPane_cipherKey_dekripsi_hybridRSACRT.setViewportView(jTextArea_plainKey_dekripsi_hybridRSACRT);
        jTextArea_plainKey_dekripsi_hybridRSACRT.setEditable(false);

        jPanel_dekripsiKeyField_RSACRT.add(jScrollPane_cipherKey_dekripsi_hybridRSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 840, 80));

        jButton_dekripsi_hybrid.setText("Decrypt");
        jButton_dekripsi_hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_dekripsi_hybridActionPerformed(evt);
            }
        });
        jPanel_dekripsiKeyField_RSACRT.add(jButton_dekripsi_hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, 77, -1));

        jLabel_browseFile_dekripsi_hybrid_RC4A.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_browseFile_dekripsi_hybrid_RC4A.setForeground(java.awt.Color.white);
        jLabel_browseFile_dekripsi_hybrid_RC4A.setText("Choose File     :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_browseFile_dekripsi_hybrid_RC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jTextField_cipherTeks_dekripsi_hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_cipherTeks_dekripsi_hybridActionPerformed(evt);
            }
        });
        jPanel_dekripsiKeyField_RSACRT.add(jTextField_cipherTeks_dekripsi_hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 240, -1));
        jTextField_cipherTeks_dekripsi_hybrid.setEditable(false);

        jButton_browsecipherText_Hybrid_RSACRT.setText("Browse");
        jButton_browsecipherText_Hybrid_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsecipherText_Hybrid_RSACRTActionPerformed(evt);
            }
        });
        jPanel_dekripsiKeyField_RSACRT.add(jButton_browsecipherText_Hybrid_RSACRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        jTextArea_cipherTeks_dekripsi_hybridRC4A.setColumns(20);
        jTextArea_cipherTeks_dekripsi_hybridRC4A.setRows(5);
        jScrollPane_cipherTeks_dekripsi_hybridRC4A.setViewportView(jTextArea_cipherTeks_dekripsi_hybridRC4A);

        jPanel_dekripsiKeyField_RSACRT.add(jScrollPane_cipherTeks_dekripsi_hybridRC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 370, 100));

        jLabel_cipherTeks_hybrid_RC4A_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_cipherTeks_hybrid_RC4A_dekripsi.setForeground(java.awt.Color.white);
        jLabel_cipherTeks_hybrid_RC4A_dekripsi.setText("Ciphertext  :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_cipherTeks_hybrid_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 98, -1));

        jLabel_plainTeks_hybrid_RC4A_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_plainTeks_hybrid_RC4A_dekripsi.setForeground(java.awt.Color.white);
        jLabel_plainTeks_hybrid_RC4A_dekripsi.setText("Plaintext   :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_plainTeks_hybrid_RC4A_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, 100, -1));

        jTextArea_plainTeks_dekripsi_hybridRC4A.setColumns(20);
        jTextArea_plainTeks_dekripsi_hybridRC4A.setRows(5);
        jScrollPane_plainTeks_dekripsi_hybridRC4A.setViewportView(jTextArea_plainTeks_dekripsi_hybridRC4A);
        jTextArea_plainTeks_dekripsi_hybridRC4A.setEditable(false);

        jPanel_dekripsiKeyField_RSACRT.add(jScrollPane_plainTeks_dekripsi_hybridRC4A, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 390, 100));

        jLabel_plainKey_Hybrid_RSACRT_dekripsi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_plainKey_Hybrid_RSACRT_dekripsi.setForeground(java.awt.Color.white);
        jLabel_plainKey_Hybrid_RSACRT_dekripsi.setText("RC4A Plainkey  :");
        jPanel_dekripsiKeyField_RSACRT.add(jLabel_plainKey_Hybrid_RSACRT_dekripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 120, -1));

        jLabel_dekripsi_HybridCryptosystem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel_dekripsi_HybridCryptosystem.setForeground(java.awt.Color.white);
        jLabel_dekripsi_HybridCryptosystem.setText("Hybrid Cryptosystem Decryption");

        javax.swing.GroupLayout jPanel_dekripsi_HybridLayout = new javax.swing.GroupLayout(jPanel_dekripsi_Hybrid);
        jPanel_dekripsi_Hybrid.setLayout(jPanel_dekripsi_HybridLayout);
        jPanel_dekripsi_HybridLayout.setHorizontalGroup(
            jPanel_dekripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_dekripsi_HybridLayout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(jLabel_dekripsi_HybridCryptosystem, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
            .addGroup(jPanel_dekripsi_HybridLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jPanel_dekripsiKeyField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_dekripsi_HybridLayout.setVerticalGroup(
            jPanel_dekripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_dekripsi_HybridLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel_dekripsi_HybridCryptosystem, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_dekripsiKeyField_RSACRT, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLayeredPane_dekripsi_Hybrid.setLayer(jPanel_dekripsi_Hybrid, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane_dekripsi_HybridLayout = new javax.swing.GroupLayout(jLayeredPane_dekripsi_Hybrid);
        jLayeredPane_dekripsi_Hybrid.setLayout(jLayeredPane_dekripsi_HybridLayout);
        jLayeredPane_dekripsi_HybridLayout.setHorizontalGroup(
            jLayeredPane_dekripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_dekripsi_Hybrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jLayeredPane_dekripsi_HybridLayout.setVerticalGroup(
            jLayeredPane_dekripsi_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane_dekripsi_HybridLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_dekripsi_Hybrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout jPanel_HybridLayout = new javax.swing.GroupLayout(jPanel_Hybrid);
        jPanel_Hybrid.setLayout(jPanel_HybridLayout);
        jPanel_HybridLayout.setHorizontalGroup(
            jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_HybridLayout.createSequentialGroup()
                .addContainerGap(782, Short.MAX_VALUE)
                .addComponent(jComboBox_Hybrid, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_Hybrid_option)
                .addGap(62, 62, 62))
            .addGroup(jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_HybridLayout.createSequentialGroup()
                    .addComponent(jLayeredPane_enkripsi_Hybrid)
                    .addContainerGap()))
            .addGroup(jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_HybridLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane_dekripsi_Hybrid)
                    .addContainerGap()))
        );
        jPanel_HybridLayout.setVerticalGroup(
            jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_HybridLayout.createSequentialGroup()
                .addGroup(jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Hybrid_option)
                    .addComponent(jComboBox_Hybrid))
                .addGap(486, 486, 486))
            .addGroup(jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_HybridLayout.createSequentialGroup()
                    .addContainerGap(17, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_enkripsi_Hybrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(26, 26, 26)))
            .addGroup(jPanel_HybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_HybridLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane_dekripsi_Hybrid, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(32, 32, 32)))
        );

        jLayeredPane_Hybrid.add(jPanel_Hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1025, 490));

        getContentPane().add(jLayeredPane_Hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 490));

        jMenuBar1.setToolTipText("Menu Bar");

        jMenu_algoritma.setText("Algorithm");
        jMenu_algoritma.setToolTipText("RC4A");
        jMenu_algoritma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_algoritmaActionPerformed(evt);
            }
        });

        jMenuItem_RSA.setText("RSA");
        jMenuItem_RSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_RSAActionPerformed(evt);
            }
        });
        jMenu_algoritma.add(jMenuItem_RSA);

        jMenuItem_RSACRT.setText("RSA-CRT");
        jMenuItem_RSACRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_RSACRTActionPerformed(evt);
            }
        });
        jMenu_algoritma.add(jMenuItem_RSACRT);

        jMenuItem_HybridCryptosystem.setText("Hybrid Cryptosystem");
        jMenuItem_HybridCryptosystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_HybridCryptosystemActionPerformed(evt);
            }
        });
        jMenu_algoritma.add(jMenuItem_HybridCryptosystem);

        jMenuBar1.add(jMenu_algoritma);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_RSACRT_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RSACRT_optionActionPerformed
        //select combo       
        String selectedItem = jComboBox_RSACRT.getSelectedItem().toString();
        switch (selectedItem) {
            case "Encrypt":
                jPanel_enkripsi_RSACRT.setVisible(true);
                jPanel_dekripsi_RSACRT.setVisible(false);
                jPanel_avalancheEffect_RSACRT.setVisible(false);
                break;
            case "Decrypt":
                jPanel_enkripsi_RSACRT.setVisible(false);
                jPanel_dekripsi_RSACRT.setVisible(true);
                jPanel_avalancheEffect_RSACRT.setVisible(false);
                break;
            case "Avalanche Effect":
                jPanel_enkripsi_RSACRT.setVisible(false);
                jPanel_dekripsi_RSACRT.setVisible(false);
                jPanel_avalancheEffect_RSACRT.setVisible(true);
                break;
            default:
                break;
        }
        
    }//GEN-LAST:event_jButton_RSACRT_optionActionPerformed

    private void jComboBox_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_RSACRTActionPerformed

    }//GEN-LAST:event_jComboBox_RSACRTActionPerformed

    private void jButton_dekripsi_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_dekripsi_RSACRTActionPerformed
        String cipherText = jTextArea_cipherText_dekripsi_RSACRT.getText();
        try{
            if(! cipherText.equals("")){
                if(! jTextField_RSACRT_privateKey.getText().equals("")){
                    start = System.currentTimeMillis();
                    
                    String joinCipher = cipherText;
            
                    joinCipher = joinCipher.replaceAll("[^\\x00-\\x7F]", "");

                    // erases all the ASCII control characters
                    //joinCipher = joinCipher.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");

                    // removes non-printable characters from Unicode
                    joinCipher = joinCipher.replaceAll("\\p{C}", "");
                    joinCipher = joinCipher.trim();
            
                    String []splitCiphers = joinCipher.split("&&");
                    String []newPlainsItem = new String[splitCiphers.length];
                    String newPlains = "";
                    
                    for (int i = 0 ; i<splitCiphers.length ; i++){         
                        String []splitCipherItems = splitCiphers[i].split("::");
                        newPlainsItem[i] = RSACRT.decrypt(splitCipherItems, crtKey.getPrivateKey());
                    }
                    newPlains = String.join("\n", newPlainsItem);
                    end = System.currentTimeMillis();
                    executionTime = end-start;
                    
                    System.out.println("start: "+start);
                    System.out.println("end: "+end);
                    System.out.println("exc: "+executionTime);
                    
                    if(! jTextField_cipherTeks1.getText().equals("")){
                        String extension = FilenameUtils.getExtension(jTextField_cipherTeks1.getText());
                        System.out.println(extension);

                        // create an object of JFileChooser class
                        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                        // restrict the user to select files of all types
                        j.setAcceptAllFileFilterUsed(false);
                        // set a title for the dialog
                        j.setDialogTitle("Save File");

                        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");

                        j.addChoosableFileFilter(restrict);

                        int save = 0;
                        // invoke the showsSaveDialog function to show the save dialog
                        int r = j.showSaveDialog(null);
                        // if the user selects a file
                        if (r == JFileChooser.APPROVE_OPTION){
                            crFile file = new crFile();
                            switch (extension) {
                                case "txt":        
                                    save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", newPlains);
                                    break;
                                case "pdf":
                                {
                                    try {
                                        save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", newPlains);
                                    }  catch (IOException ex) {
                                        Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                                    break;

                                default:
                                    break;
                            }
                            System.out.println(extension);
                            // set the label to the path of the selected file         
                            if (save == -1){
                                JOptionPane.showMessageDialog(null, "File already exists.");
                                executionTime = 0;
                            } else if (save == 1){
                                JOptionPane.showMessageDialog(null, "Save File success");  
                            }
                            jTextArea_plainText_dekripsi_RSACRT.setText(newPlains);
                            executionTime = end-start;
                        } else{
                            JOptionPane.showMessageDialog(null, "Save File has been canceled");
                            executionTime = 0;
                        }
                    } else {
                        jTextArea_plainText_dekripsi_RSACRT.setText(newPlains);
                        executionTime = end-start;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Key is empty!");
                    executionTime = 0;
                }
            } else{
                JOptionPane.showMessageDialog(null, "Ciphertext is empty!");
                executionTime = 0;
            }
        } catch (NumberFormatException exc){
            jTextArea_cipherText_dekripsi_RSACRT.setText("");
            JOptionPane.showMessageDialog(null, "Wrong Format Ciphertext");
            executionTime = 0;
            exc.printStackTrace();
        }
        jTextField_processingTime_RSACRT_dekripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_dekripsi_RSACRTActionPerformed

    private void jButton_RC4A_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RC4A_optionActionPerformed
        // TODO add your handling code here:
        String selectedItem = jComboBox_RC4A.getSelectedItem().toString();
        switch (selectedItem) {
            case "Encrypt":
                jPanel_enkripsi_RC4A.setVisible(true);
                jPanel_dekripsi_RC4A.setVisible(false); 
                jPanel_avalancheEffect_RC4A.setVisible(false);
                break;
            case "Decrypt":
                jPanel_enkripsi_RC4A.setVisible(false);
                jPanel_dekripsi_RC4A.setVisible(true);
                jPanel_avalancheEffect_RC4A.setVisible(false);
                break;
            case "Avalanche Effect":
                jPanel_enkripsi_RC4A.setVisible(false);
                jPanel_dekripsi_RC4A.setVisible(false);
                jPanel_avalancheEffect_RC4A.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jButton_RC4A_optionActionPerformed

    private void jComboBox_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_RC4AActionPerformed

    }//GEN-LAST:event_jComboBox_RC4AActionPerformed

    private void jButton_enkripsi_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_enkripsi_RC4AActionPerformed
        
        String plainText = jTextArea_plainText_enkripsi_RC4A.getText();
        RC4A rc = new RC4A();
        if(! plainText.equals("")){
            if(! jTextField_key_RC4A.getText().equals("")){
                String key = jTextField_key_RC4A.getText();
                
                start = System.currentTimeMillis();
                BigInteger encryptBigInteger = rc.encryptProcessRC4A(plainText, key);
                String encrypt = encryptBigInteger.toString();
                end = System.currentTimeMillis();
                
                if(! jTextField_plainTeks.getText().equals("")){
                    String extension = FilenameUtils.getExtension(jTextField_plainTeks.getText());
                    System.out.println(extension);
                    
                    // create an object of JFileChooser class
                    JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    // restrict the user to select files of all types
                    j.setAcceptAllFileFilterUsed(false);
                    // set a title for the dialog
                    j.setDialogTitle("Save File");
                    
                    FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
                    
                    j.addChoosableFileFilter(restrict);
                                    
                    int save = 0;
                    // invoke the showsSaveDialog function to show the save dialog
                    int r = j.showSaveDialog(null);
                    // if the user selects a file
                    if (r == JFileChooser.APPROVE_OPTION){
                        crFile file = new crFile();
                        switch (extension) {
                            case "txt":        
                                save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", encrypt);
                                break;
                            case "pdf":
                            {
                                try {
                                    save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", encrypt);
                                    System.out.println(save);
                                }  catch (IOException ex) {
                                    Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                                break;

                            default:
                                break;
                        }
                        // set the label to the path of the selected file         
                        if (save == -1){
                            JOptionPane.showMessageDialog(null, "File already exists.");
                            executionTime = 0;
                        } else if (save == 1){
                            JOptionPane.showMessageDialog(null, "Save File success");
                            executionTime = end-start;
                        }
                        jTextArea_cipherText_enkripsi_RC4A.setText(encrypt);
                    } else{
                        JOptionPane.showMessageDialog(null, "Save File has been canceled");
                        executionTime = 0;
                    }
                } else {
                    jTextArea_cipherText_enkripsi_RC4A.setText(encrypt);
                    executionTime = end-start;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Key is empty!");
                executionTime = 0;
            }
        } else{
            JOptionPane.showMessageDialog(null, "Plaintext is empty!");
            executionTime = 0;
        } 
  
        jTextField_processingTime_RC4A_enkripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_enkripsi_RC4AActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButton_enkripsi_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_enkripsi_RSACRTActionPerformed
        long start1,end1,exc1;
        String plainText = jTextArea_plainText_enkripsi_RSACRT.getText();
        String ciphertext = "";
        double waktu=0;
        double waktuRata = 0;
        if(! plainText.equals("")){
            try{      
            for(int x=0 ; x<5;x++){
                start1 = System.currentTimeMillis();
                plainText = plainText.replaceAll("[^\\x00-\\x7F]", "");
                // erases all the ASCII control characters
//                plainText = plainText.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");

                // removes non-printable characters from Unicode
//                plainText = plainText.replaceAll("\\p{C}", "");
                plainText = plainText.trim();
                
                String []split = plainText.split("\n");
                processRSACRT []ciphers = new processRSACRT[split.length];
                String []ciphersString = new String[split.length];
                ciphertext = "";

                for (int i = 0 ; i<split.length ; i++){
                    if("".equals(split[i])){
                        split[i] = " ";
                    } 

                    ciphers [i] = RSACRT.encrypt(split[i], crtKey.getPublicKey());
                    ciphersString[i] = ciphers[i].enkripsi;
                }
                ciphertext = String.join("&&",ciphersString);
                end1 = System.currentTimeMillis();
                exc1 = end1-start1;
                
                System.out.println("cipher "+ciphertext+" ke-"+x+": "+ciphertext);
                System.out.println("start :"+start1+" ke-"+x+": "+start1);
                System.out.println("end :"+end1+" ke-"+x+": "+end1);
                System.out.println("exc ::"+exc1+" ke-"+x+": "+exc1);
                waktu = waktu + exc1;
            }
            waktuRata = waktu/5;
            System.out.println("=====================\nWaktu Rata:"+waktuRata);
                    
                if(! jTextField_plainTeks1.getText().equals("")){
                    String extension = FilenameUtils.getExtension(jTextField_plainTeks1.getText());
                    System.out.println(extension);
                    
                    // create an object of JFileChooser class
                    JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    // restrict the user to select files of all types
                    j.setAcceptAllFileFilterUsed(false);
                    // set a title for the dialog
                    j.setDialogTitle("Save File");
                    
                    FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
                    
                    j.addChoosableFileFilter(restrict);
                                    
                    int save = 0;
                    // invoke the showsSaveDialog function to show the save dialog
                    int r = j.showSaveDialog(null);
                    // if the user selects a file
                    if (r == JFileChooser.APPROVE_OPTION){
                        crFile file = new crFile();
                        switch (extension) {
                            case "txt":        
                                save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", ciphertext);
                                break;
                            case "pdf":
                            {
                                try {
                                    save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", ciphertext);
                                    System.out.println(save);
                                }  catch (IOException ex) {
                                    Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                                break;

                            default:
                                break;
                        }
                        // set the label to the path of the selected file         
                        if (save == -1){
                            JOptionPane.showMessageDialog(null, "File already exists.");
                            exc1 = 0;
                        } else if (save == 1){
                            JOptionPane.showMessageDialog(null, "Save File success");
                        }
                        jTextArea_cipherText_enkripsi_RSACRT.setText(ciphertext);
                        
                    } else{
                        JOptionPane.showMessageDialog(null, "Save File has been canceled");
                        exc1 = 0;
                    }
                } else {
                    jTextArea_cipherText_enkripsi_RSACRT.setText(ciphertext);
                    
                }
            }catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Key is empty!");
                exc1 = 0;
            }
        } else{
            JOptionPane.showMessageDialog(null, "Plaintext is empty!");
            exc1 = 0;
        } 
        jTextField_processingTime_RSACRT_enkripsi.setText(Double.toString(waktuRata));
    }//GEN-LAST:event_jButton_enkripsi_RSACRTActionPerformed

    private void jMenu_algoritmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_algoritmaActionPerformed
        firstPanel();
    }//GEN-LAST:event_jMenu_algoritmaActionPerformed

    private void jMenuItem_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_RSAActionPerformed
        firstPanel();
    }//GEN-LAST:event_jMenuItem_RSAActionPerformed

    private void jMenuItem_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_RSACRTActionPerformed
        jPanel_RC4A.setVisible(false);
        jPanel_RSA.setVisible(false);
        jPanel_RSACRT.setVisible(true);
        jPanel_Hybrid.setVisible(false);
        jPanel_enkripsi_RC4A.setVisible(false);
        jPanel_dekripsi_RC4A.setVisible(false);
        jPanel_avalancheEffect_RC4A.setVisible(false);

        jPanel_enkripsi_RSA.setVisible(false);
        jPanel_dekripsi_RSA.setVisible(false);
        jPanel_avalancheEffect_RSA.setVisible(false);
        jPanel_enkripsi_RSACRT.setVisible(true);
        jPanel_dekripsi_RSACRT.setVisible(false);
        jPanel_avalancheEffect_RSACRT.setVisible(false);
        jPanel_enkripsi_Hybrid.setVisible(false);
        jPanel_dekripsi_Hybrid.setVisible(false);
    }//GEN-LAST:event_jMenuItem_RSACRTActionPerformed

    private void jButton_dekripsi_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_dekripsi_RC4AActionPerformed
        
        String cipherText = jTextArea_cipherText_dekripsi_RC4A.getText();
        String key = jTextField_key_RC4A1.getText();
        
        cipherText = cipherText.replaceAll("\n", "");
        //System.out.println("cipherText:"+cipherText+"\n");
        
        RC4A RC = new RC4A();
        try{
            if(! cipherText.equals("")){
                if(! jTextField_key_RC4A1.getText().equals("")){
                    start = System.currentTimeMillis();
                    String decrypt = RC.decryptProcessRC4A(cipherText, key);
                    end = System.currentTimeMillis();
                    if(! jTextField_cipherTeks.getText().equals("")){
                        String extension = FilenameUtils.getExtension(jTextField_cipherTeks.getText());
                        System.out.println(extension);

                        // create an object of JFileChooser class
                        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                        // restrict the user to select files of all types
                        j.setAcceptAllFileFilterUsed(false);
                        // set a title for the dialog
                        j.setDialogTitle("Save File");

                        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");

                        j.addChoosableFileFilter(restrict);

                        int save = 0;
                        // invoke the showsSaveDialog function to show the save dialog
                        int r = j.showSaveDialog(null);
                        // if the user selects a file
                        if (r == JFileChooser.APPROVE_OPTION){
                            crFile file = new crFile();
                            switch (extension) {
                                case "txt":        
                                    save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", decrypt);
                                    break;
                                case "pdf":
                                {
                                    try {
                                        save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", decrypt);
                                    }  catch (IOException ex) {
                                        Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                                    break;
                                default:
                                    break;
                            }
                            System.out.println(extension);
                            // set the label to the path of the selected file         
                            if (save == -1){
                                JOptionPane.showMessageDialog(null, "File already exists.");
                                executionTime = 0;
                            } else if (save == 1){
                                JOptionPane.showMessageDialog(null, "Save File success");
                                executionTime = end-start;
                            }
                            jTextArea_plainText_dekripsi_RC4A.setText(decrypt);
                        } else{
                            JOptionPane.showMessageDialog(null, "Save File has been canceled");
                            executionTime = 0;
                        }
                    } else {
                        jTextArea_plainText_dekripsi_RC4A.setText(decrypt);
                        executionTime = end-start;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Key is empty!");
                    executionTime = 0;
                }
            } else{
                JOptionPane.showMessageDialog(null, "Ciphertext is empty!");
                executionTime = 0;
            }
        } catch (NumberFormatException exc){
            jTextArea_plainText_dekripsi_RC4A.setText("");
            JOptionPane.showMessageDialog(null, "Wrong Format Ciphertext");  
            exc.printStackTrace();
        }
        
        
        jTextField_processingTime_RC4A_dekripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_dekripsi_RC4AActionPerformed

    private void jTextField_plainTeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_plainTeksActionPerformed
        if(jTextField_plainTeks.equals("")){
            jTextArea_plainText_enkripsi_RC4A.setEditable(true);
        }else{
            jTextArea_plainText_enkripsi_RC4A.setEditable(false);
        }
    }//GEN-LAST:event_jTextField_plainTeksActionPerformed

    private void jButton_Hybrid_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Hybrid_optionActionPerformed
        String selectedItem = jComboBox_Hybrid.getSelectedItem().toString();
        switch (selectedItem) {
            case "Encrypt":
                jPanel_enkripsi_Hybrid.setVisible(true);
                jPanel_dekripsi_Hybrid.setVisible(false);
                break;
            case "Decrypt":
                jPanel_enkripsi_Hybrid.setVisible(false);
                jPanel_dekripsi_Hybrid.setVisible(true);
                break;
            case "Generate Key":
                jPanel_enkripsi_Hybrid.setVisible(false);
                jPanel_dekripsi_Hybrid.setVisible(false);
                break;                
            default:
                break;
        }
    }//GEN-LAST:event_jButton_Hybrid_optionActionPerformed

    private void jComboBox_HybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_HybridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_HybridActionPerformed

    private void jTextField_plainTeks_hybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_plainTeks_hybridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_plainTeks_hybridActionPerformed

    private void jButton_enkripsi_hybrid_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_enkripsi_hybrid_RC4AActionPerformed
	long start1, start2, end1, end2, excPlain, excKey;
        
        String plainText = jTextArea_plainText_enkripsi_hybridRC4A.getText();
        RC4A rc = new RC4A();
        if(! plainText.equals("")){
            if(! jTextField_key_enkripsi_hybrid_RC4A.getText().equals("")){
                String key = jTextField_key_enkripsi_hybrid_RC4A.getText();
                String encrypt ="";

            start1 = System.currentTimeMillis();
                BigInteger encryptBigInteger = rc.encryptProcessRC4A(plainText, key);
                encrypt = encryptBigInteger.toString();
            end1 = System.currentTimeMillis();
                excPlain = end1 - start1;

                
                if(! jTextField_plainTeks_hybrid.getText().equals("")){
                    String extension = FilenameUtils.getExtension(jTextField_plainTeks_hybrid.getText());
                    System.out.println(extension);
                    
                    // create an object of JFileChooser class
                    JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    // restrict the user to select files of all types
                    j.setAcceptAllFileFilterUsed(false);
                    // set a title for the dialog
                    j.setDialogTitle("Save File");
                    
                    FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
                    
                    j.addChoosableFileFilter(restrict);
                                    
                    int save = 0;
                    // invoke the showsSaveDialog function to show the save dialog
                    int r = j.showSaveDialog(null);
                    // if the user selects a file
                    if (r == JFileChooser.APPROVE_OPTION){
                        crFile file = new crFile();
                        switch (extension) {
                            case "txt":        
                                save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", encrypt);
                                break;
                            case "pdf":
                            {
                                try {
                                    save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", encrypt);
                                    System.out.println(save);
                                }  catch (IOException ex) {
                                    Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                                break;
                            default:
                                break;
                        }
                        // set the label to the path of the selected file         
                        if (save == -1){
                            JOptionPane.showMessageDialog(null, "File already exists.");
                        } else if (save == 1){
                            JOptionPane.showMessageDialog(null, "Save File success");
                        }
                        jTextArea_cipherText_enkripsi_hybridRC4A.setText(encrypt);
                    } else{
                        JOptionPane.showMessageDialog(null, "Save File has been canceled");
                        executionTime = 0;
                    }
                } else {
                    jTextArea_cipherText_enkripsi_hybridRC4A.setText(encrypt);
                }
                
                if(! key.equals("")){
                    try{

                    start2 = System.currentTimeMillis();
                        key = key.replaceAll("[^\\x00-\\x7F]", "");
                        // erases all the ASCII control characters
                        //key = key.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");

                        // removes non-printable characters from Unicode
                        //plainText = plainText.replaceAll("\\p{C}", "");
                        key = key.trim();
                        processRSACRT encryptKey = RSACRT.encrypt(key, crtKey.getPublicKey());
                    end2 = System.currentTimeMillis();
                        excKey = end2 - start2;
                        jTextArea_cipherKey_enkripsi_hybridRSACRT.setText(encryptKey.enkripsi);
                       
                        executionTime = excPlain + excKey;
                        System.out.println("Encrypt Key:"+encryptKey.enkripsi);


                    }catch(Exception e){
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Key is empty!");
                        executionTime = 0;
                    }
                } else{
                    JOptionPane.showMessageDialog(null, "Key is empty!");
                    executionTime = 0;
                } 
            } else {
                JOptionPane.showMessageDialog(null, "Key is empty!");
                executionTime = 0;
            }
        } else{
            JOptionPane.showMessageDialog(null, "Plaintext is empty!");
            executionTime = 0;
        } 
        jTextField_processingTime_hybrid_RC4A_enkripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_enkripsi_hybrid_RC4AActionPerformed

    private void jMenuItem_HybridCryptosystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_HybridCryptosystemActionPerformed
        jPanel_RC4A.setVisible(false);
        jPanel_RSA.setVisible(false);
        jPanel_RSACRT.setVisible(false);
        jPanel_Hybrid.setVisible(true);
        jPanel_enkripsi_RC4A.setVisible(false);      
        jPanel_dekripsi_RC4A.setVisible(false);
        jPanel_avalancheEffect_RC4A.setVisible(false);
        
        jPanel_enkripsi_RSA.setVisible(false);
        jPanel_dekripsi_RSA.setVisible(false);
        jPanel_avalancheEffect_RSA.setVisible(false);
        jPanel_enkripsi_RSACRT.setVisible(false);
        jPanel_dekripsi_RSACRT.setVisible(false);
        jPanel_avalancheEffect_RSACRT.setVisible(false);
        jPanel_enkripsi_Hybrid.setVisible(true);
        jPanel_dekripsi_Hybrid.setVisible(false); 
    }//GEN-LAST:event_jMenuItem_HybridCryptosystemActionPerformed

    private void jTextField_processingTime_hybrid_RC4A_enkripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_processingTime_hybrid_RC4A_enkripsiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_processingTime_hybrid_RC4A_enkripsiActionPerformed

    private void jTextField_cipherTeks_dekripsi_hybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_cipherTeks_dekripsi_hybridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_cipherTeks_dekripsi_hybridActionPerformed

    private void jButton_dekripsi_hybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_dekripsi_hybridActionPerformed
        long start1, start2, end1, end2, dekCipher, dekKey;
        String cipherText = jTextArea_cipherTeks_dekripsi_hybridRC4A.getText();
        String cipherKeyDecrypt = jTextArea_cipherKey_dekripsi_hybridRSACRT.getText();
        cipherText = cipherText.replaceAll("\n", "");   
        String decrypt = "";
        RC4A RC = new RC4A();
        try{
            if(! cipherText.equals("")){
                try{
                    if(! cipherKeyDecrypt.equals("")){
                        if(! jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT.getText().equals("")){
                            start1 = System.currentTimeMillis();
                            String joinCipher = cipherKeyDecrypt;
                            joinCipher = joinCipher.replaceAll("[^\\x00-\\x7F]", "");
                            
                            joinCipher = joinCipher.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");
                            // removes non-printable characters from Unicode
                            joinCipher = joinCipher.replaceAll("\\p{C}", "");
                            joinCipher = joinCipher.trim();
                            
                            String []split  = joinCipher.split("::");
                            String plainKey = RSACRT.decrypt(split, crtKey.getPrivateKey());
                            end1 = System.currentTimeMillis();
                            dekKey = end1 - start1;
                            
                            jTextArea_plainKey_dekripsi_hybridRSACRT.setText(plainKey);
                            
                            start2 = System.currentTimeMillis();
                            decrypt = RC.decryptProcessRC4A(cipherText, plainKey);
                            end2 = System.currentTimeMillis();
                            dekCipher = end2 - start2;

                            executionTime = dekKey + dekCipher;

                            if(! jTextField_cipherTeks_dekripsi_hybrid.getText().equals("")){
                                String extension = FilenameUtils.getExtension(jTextField_cipherTeks_dekripsi_hybrid.getText());
                                System.out.println(extension);

                                // create an object of JFileChooser class
                                JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                                // restrict the user to select files of all types
                                j.setAcceptAllFileFilterUsed(false);
                                // set a title for the dialog
                                j.setDialogTitle("Save File");

                                FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");

                                j.addChoosableFileFilter(restrict);

                                int save = 0;
                                // invoke the showsSaveDialog function to show the save dialog
                                int r = j.showSaveDialog(null);
                                // if the user selects a file
                                if (r == JFileChooser.APPROVE_OPTION){
                                    crFile file = new crFile();
                                    switch (extension) {
                                        case "txt":        
                                            save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", decrypt);
                                            break;
                                        case "pdf":
                                        {
                                            try {
                                                save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", decrypt);
                                            }  catch (IOException ex) {
                                                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                            break;
                                        default:
                                            break;
                                    }
                                    if (save == -1){
                                        JOptionPane.showMessageDialog(null, "File already exists.");
                                        executionTime = 0;
                                    } else if (save == 1){
                                        JOptionPane.showMessageDialog(null, "Save File success");
                                    }
                                    jTextArea_plainTeks_dekripsi_hybridRC4A.setText(decrypt);
                                    jTextField_processingTime_Hybrid_dekripsi.setText(Double.toString(executionTime));
                                } else{
                                    JOptionPane.showMessageDialog(null, "Save File has been canceled");
                                    executionTime = 0;
                                }
                            } else {
                                jTextArea_plainTeks_dekripsi_hybridRC4A.setText(decrypt);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Key is empty!");
                            executionTime = 0;
                        }
                    } else{
                        JOptionPane.showMessageDialog(null, "Ciphertext is empty!");
                        executionTime = 0;
                    }
                } catch (NumberFormatException exc){
                    jTextArea_cipherText_dekripsi_RSACRT.setText("");
                    JOptionPane.showMessageDialog(null, "Wrong Format Cipherkey");  
                    executionTime = 0;
                    exc.printStackTrace();
                }              
            } else{
                JOptionPane.showMessageDialog(null, "Ciphertext is empty!");
                executionTime = 0;
            }
        } catch (NumberFormatException exc){
            jTextArea_plainTeks_dekripsi_hybridRC4A.setText("");
            JOptionPane.showMessageDialog(null, "Wrong Format Ciphertext");  
            executionTime = 0;
            exc.printStackTrace();
        }
        jTextField_processingTime_Hybrid_dekripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_dekripsi_hybridActionPerformed

    private void jButton_GenerateKey_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GenerateKey_RSACRTActionPerformed
        Key_RSACRT key = crtKey.generateKey();
        String P = key.p.toString();
        String Q = key.q.toString();
        String N = key.N.toString();
        String D = key.d.toString();
        String E = key.e.toString();
        
        if(!P.equals("")&&!Q.equals("")&&!N.equals("")&&!D.equals("")&&!E.equals("")){
            RSACRT rsa= new RSACRT();      
            crtKey.p = new BigInteger(P); 
            crtKey.q = new BigInteger(Q);
            crtKey.N = new BigInteger(N);
            crtKey.d = new BigInteger(D);
            crtKey.e = new BigInteger(E);
            
            // create an object of JFileChooser class
            JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            // restrict the user to select files of all types
            j.setAcceptAllFileFilterUsed(false);
            // set a title for the dialog
            j.setDialogTitle("Save Key");
            // only allow files of .txt extension
            FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsacrtpublickey .rsacrtprivatekey", "rsacrtpublickey", "rsacrtprivatekey");
            j.addChoosableFileFilter(restrict);
            // invoke the showsSaveDialog function to show the save dialog
            int s = j.showSaveDialog(null);
            
            // if the user selects a file
            if (s == JFileChooser.APPROVE_OPTION)
            {
                // set the label to the path of the selected file
                int save = Key_RSACRT.saveFileKey(crtKey, j.getSelectedFile().getAbsolutePath());
                if (save == -1){
                    JOptionPane.showMessageDialog(null, "File already exists.");
                }
                JOptionPane.showMessageDialog(null, "Save key success"); 
                
                String [] readPublicKey = crtKey.readKey(j.getSelectedFile().getAbsolutePath()+"-pbc.rsacrtpublickey");
                Key_RSACRT publicKey = crtKey.getPublicKey(readPublicKey);
                String N_key = publicKey.N.toString();
                String E_key = publicKey.e.toString();

                crtKey.setPublicKey(publicKey.N, publicKey.e);
                jTextField_N_publicKey.setText(N_key);
                jTextField_E_publicKey.setText(E_key);    
            }
            // if the user cancelled the operation
            else
                JOptionPane.showMessageDialog(null, "Save key has been canceled"); 
        } else{
            JOptionPane.showMessageDialog(null, "Invalid Key!");
        }
        
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_GenerateKey_RSACRTActionPerformed

    private void jTextField_processingTime_RSACRT_enkripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_processingTime_RSACRT_enkripsiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_processingTime_RSACRT_enkripsiActionPerformed

    private void jTextField_N_publicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_N_publicKeyActionPerformed

        
    }//GEN-LAST:event_jTextField_N_publicKeyActionPerformed

    private void jTextField_E_publicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_E_publicKeyActionPerformed

        
    }//GEN-LAST:event_jTextField_E_publicKeyActionPerformed

    private void jButton_browsePlaintext_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));      
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            RSACRT crt = new RSACRT();
            
            jTextField_plainTeks1.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_plainText_enkripsi_RSACRT.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText_enkripsi_RSACRT.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePlaintext_RSACRTActionPerformed

    private void jTextField_plainTeks1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_plainTeks1ActionPerformed
        if(jTextField_plainTeks1.equals("")){
            jTextArea_plainText_enkripsi_RSACRT.setEditable(true);
        }else{
            jTextArea_plainText_enkripsi_RSACRT.setEditable(false);
        }
    }//GEN-LAST:event_jTextField_plainTeks1ActionPerformed

    private void jButton_browseCiphertext_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browseCiphertext_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Ciphertext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word Documents (*.docx)", "docx"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word 97-2003 (*.doc)", "doc"));        
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            RSACRT crt = new RSACRT();
            
            jTextField_cipherTeks1.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_cipherText_dekripsi_RSACRT.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_cipherText_dekripsi_RSACRT.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browseCiphertext_RSACRTActionPerformed

    private void jTextField_cipherTeks1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_cipherTeks1ActionPerformed
        jTextField_cipherTeks1.setEditable(false);
        if(jTextField_cipherTeks1.equals("")){
            jTextArea_cipherText_dekripsi_RSACRT.setEditable(true);
        }else{
            jTextArea_cipherText_dekripsi_RSACRT.setEditable(false);
        }
    }//GEN-LAST:event_jTextField_cipherTeks1ActionPerformed

    private void jButton_browsePrivatekey_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePrivatekey_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Private Key");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsacrtprivatekey", "rsacrtprivatekey");
        j.addChoosableFileFilter(restrict);
        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            String [] readPrivateKey = crtKey.readKey(j.getSelectedFile().getAbsolutePath());
            Key_RSACRT privateKey = crtKey.getPrivateKey(readPrivateKey);


            crtKey.setPrivateKey(privateKey.N, privateKey.d, privateKey.p, privateKey.q);

            jTextField_RSACRT_privateKey.setText(j.getSelectedFile().getAbsolutePath());          
        } else {
            JOptionPane.showMessageDialog(null, "Choose private key has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePrivatekey_RSACRTActionPerformed

    private void jButton_browsePlaintext_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext_RC4AActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word Documents (*.docx)", "docx"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word 97-2003 (*.doc)", "doc"));        
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {          
            jTextField_plainTeks.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_plainText_enkripsi_RC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText_enkripsi_RC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePlaintext_RC4AActionPerformed

    private void jButton_browseciphertext_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browseciphertext_RC4AActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Ciphertext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));     
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            jTextField_cipherTeks.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_cipherText_dekripsi_RC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_cipherText_dekripsi_RC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");        
    }//GEN-LAST:event_jButton_browseciphertext_RC4AActionPerformed

    private void jTextField_cipherTeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_cipherTeksActionPerformed
        if(jTextField_cipherTeks.equals("")){
            jTextArea_cipherText_dekripsi_RC4A.setEditable(true);
        }else{
            jTextArea_cipherText_dekripsi_RC4A.setEditable(false);
        }
    }//GEN-LAST:event_jTextField_cipherTeksActionPerformed

    private void jButton_browsecipherText_Hybrid_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsecipherText_Hybrid_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Ciphertext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.docx, *.doc, *.pdf)", "txt", "docx","doc", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("Word Documents (*.docx)", "docx"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("Word 97-2003 (*.doc)", "doc"));        
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            
            jTextField_cipherTeks_dekripsi_hybrid.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_cipherTeks_dekripsi_hybridRC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_cipherTeks_dekripsi_hybridRC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");        
    }//GEN-LAST:event_jButton_browsecipherText_Hybrid_RSACRTActionPerformed

    private void jButton_browsePlaintext_hybrid_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext_hybrid_RC4AActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));     
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            
            jTextField_plainTeks_hybrid.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_plainText_enkripsi_hybridRC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText_enkripsi_hybridRC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePlaintext_hybrid_RC4AActionPerformed

    private void jButton_generate_RSACRT_Key_HybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_generate_RSACRT_Key_HybridActionPerformed
        Key_RSACRT key = crtKey.generateKey();
        String P = key.p.toString();
        String Q = key.q.toString();
        String N = key.N.toString();
        String D = key.d.toString();
        String E = key.e.toString();
        
        if(!P.equals("")&&!Q.equals("")&&!N.equals("")&&!D.equals("")&&!E.equals("")){
            RSACRT rsa= new RSACRT();      
            crtKey.p = new BigInteger(P); 
            crtKey.q = new BigInteger(Q);
            crtKey.N = new BigInteger(N);
            crtKey.d = new BigInteger(D);
            crtKey.e = new BigInteger(E);
            
            // create an object of JFileChooser class
            JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            // restrict the user to select files of all types
            j.setAcceptAllFileFilterUsed(false);
            // set a title for the dialog
            j.setDialogTitle("Save Key");
            // only allow files of .txt extension
            FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsacrtpublickey .rsacrtprivatekey", "rsapublickey", "rsaprivatekey");
            j.addChoosableFileFilter(restrict);
            // invoke the showsSaveDialog function to show the save dialog
            int s = j.showSaveDialog(null);
            
           
            // if the user selects a file
            if (s == JFileChooser.APPROVE_OPTION)
            {
                // set the label to the path of the selected file
                int save = Key_RSACRT.saveFileKey(crtKey, j.getSelectedFile().getAbsolutePath());
                if (save == -1){
                    JOptionPane.showMessageDialog(null, "File already exists.");
                }
                JOptionPane.showMessageDialog(null, "Save key success"); 
                
                String [] readPublicKey = crtKey.readKey(j.getSelectedFile().getAbsolutePath()+"-pbc.rsacrtpublickey");
                Key_RSACRT publicKey = crtKey.getPublicKey(readPublicKey);
                String N_key = publicKey.N.toString();
                String E_key = publicKey.e.toString();

                crtKey.setPublicKey(publicKey.N, publicKey.e);
                jTextField_key_N_Hybrid_RSACRT.setText(N_key);
                jTextField_E_key_Hybrid_RSACRT.setText(E_key);    
            }
            // if the user cancelled the operation
            else
                JOptionPane.showMessageDialog(null, "Save key has been canceled"); 
        } else{
            JOptionPane.showMessageDialog(null, "Invalid Key!");
        }
        
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_generate_RSACRT_Key_HybridActionPerformed

    private void jButton_browse_RSACRT_privateKey_HybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browse_RSACRT_privateKey_HybridActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Private Key");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsacrtprivatekey", "rsacrtprivatekey");
        j.addChoosableFileFilter(restrict);
        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            String [] readPrivateKey = crtKey.readKey(j.getSelectedFile().getAbsolutePath());
            Key_RSACRT privateKey = crtKey.getPrivateKey(readPrivateKey);

            crtKey.setPrivateKey(privateKey.N, privateKey.d, privateKey.p, privateKey.q);

            jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT.setText(j.getSelectedFile().getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(null, "Choose private key has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browse_RSACRT_privateKey_HybridActionPerformed

    private void jTextField_N_avalancheEffect_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_N_avalancheEffect_RSACRTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_N_avalancheEffect_RSACRTActionPerformed

    private void jTextField_E_avalancheEffect_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_E_avalancheEffect_RSACRTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_E_avalancheEffect_RSACRTActionPerformed

    private void jButton_calculate_avalancheEffect_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calculate_avalancheEffect_RSACRTActionPerformed
        avalancheEffect AE = new avalancheEffect();
        String plainText1 = jTextArea_plaintext1_avalancheEffect_RSACRT.getText();
        plainText1 = plainText1.replaceAll("\n", " ");
        plainText1 = plainText1.substring(0, 20);
        String []plainText2 = AE.makeSomePlain(plainText1);;
        
        if (!plainText1.equals("")){
            if (!plainText2.equals("")){
                    try{
                        plainText1 = plainText1.replaceAll("[^\\x00-\\x7F]", "");
                        plainText1 = plainText1.trim();
                        String []split1 = plainText1.split("\n");
                        processRSACRT []ciphers1 = new processRSACRT[split1.length];
                        String []ciphersString1 = new String[split1.length];
                        String ciphertext1 = "";

                        for (int i = 0 ; i<split1.length ; i++){
                            if("".equals(split1[i])){
                                split1[i] = " ";
                            } 
                            ciphers1 [i] = RSACRT.encrypt(split1[i], crtKey.getPublicKey());
                            ciphersString1 [i] = ciphers1[i].enkripsi;
                        }
                        ciphertext1 = String.join("&&",ciphersString1);
                        
                        String[] newPlains = AE.makeSomePlain(plainText1);

                        System.out.println(Arrays.toString(newPlains));

                        String []ciphertext2 = new String [newPlains.length];
                        for(int i=0; i<newPlains.length; i++){
                            newPlains[i] = newPlains[i].replaceAll("[^\\x00-\\x7F]", "");
                            newPlains[i] = newPlains[i].trim();
                            String []split2 = newPlains[i].split("\n");
                            processRSACRT []ciphers2 = new processRSACRT[split2.length];
                            String []ciphersString2 = new String[split2.length];
                            String cipher2 = "";

                            for (int j = 0 ; j<split2.length ; j++){
                                if("".equals(split2[j])){
                                    split2[j] = " ";
                                } 
                                ciphers2 [j] = RSACRT.encrypt(split2[j], crtKey.getPublicKey());
                                ciphersString2 [j] = ciphers2[j].enkripsi;
                            }
                            cipher2 = String.join("&&",ciphersString2);
                            ciphertext2[i] = cipher2;
                        }
                        System.out.println("cipher2; "+Arrays.toString(ciphertext2));

                        String result = AE.avalancheEffect(ciphertext1,  ciphertext2, plainText1, newPlains);
                        jTextArea_avalancheEffect_RSACRT.setText(result);
                    }catch(Exception e){
                        e.printStackTrace();
                        System.out.println(e.toString());
                        JOptionPane.showMessageDialog(null, "Key is empty!");
                    }
            }else{
                JOptionPane.showMessageDialog(null, "Plaintext 2 is empty!");
            } 
        }else{
            JOptionPane.showMessageDialog(null, "Plaintext 1 is empty!");
        }
    }//GEN-LAST:event_jButton_calculate_avalancheEffect_RSACRTActionPerformed

    private void jButton_browseKey_avalancheEffect_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browseKey_avalancheEffect_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Public Key");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsacrtpublickey", "rsacrtpublickey");
        j.addChoosableFileFilter(restrict);
        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
          String [] readPublicKey = crtKey.readKey(j.getSelectedFile().getAbsolutePath());
          Key_RSACRT publicKey = crtKey.getPublicKey(readPublicKey);
          String N = publicKey.N.toString();
          String E = publicKey.e.toString();

          crtKey.setPublicKey(publicKey.N, publicKey.e);
          jTextField_N_avalancheEffect_RSACRT.setText(N);
          jTextField_E_avalancheEffect_RSACRT.setText(E);                
        } else {
          JOptionPane.showMessageDialog(null, "Choose public key has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browseKey_avalancheEffect_RSACRTActionPerformed

    private void jTextField_key_avalancheEffect_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_key_avalancheEffect_RC4AActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_key_avalancheEffect_RC4AActionPerformed

    private void jTextField_processingTime_Hybrid_dekripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_processingTime_Hybrid_dekripsiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_processingTime_Hybrid_dekripsiActionPerformed

    private void jTextField_RSACRT_privateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_RSACRT_privateKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_RSACRT_privateKeyActionPerformed

    private void jButton_calculate_avalancheEffect_RC4A1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calculate_avalancheEffect_RC4A1ActionPerformed
        avalancheEffect AE = new avalancheEffect();
        RC4A rc = new RC4A();
        
        String plainText1 = jTextArea_plainText1_avalancheEffect_RC4A.getText();
        String plainText2 = jTextArea_plainText2_avalancheEffect_RC4A.getText();
        
        if (!plainText1.equals("")){
            if (!plainText2.equals("")){
                if(! jTextField_key_avalancheEffect_RC4A.getText().equals("")){
                    String key = jTextField_key_avalancheEffect_RC4A.getText();
                    try{
                        BigInteger encryptBigInteger1 = rc.encryptProcessRC4A(plainText1, key);
                        String cipher1 = encryptBigInteger1.toString();
                        BigInteger encryptBigInteger2 = rc.encryptProcessRC4A(plainText2, key);
                        String cipher2 = encryptBigInteger2.toString();
                        
//                        String result = AE.avalancheEffect(cipher1,  cipher2, plainText1, plainText2); 
//                        jTextArea_avalancheEffect_RC4A1.setText(result);
                    }catch(Exception e){
                        e.printStackTrace();
                        System.out.println(e.toString());
                        JOptionPane.showMessageDialog(null, "UNKNOWN!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Key is empty!");
                }
            }else{
                JOptionPane.showMessageDialog(null, "Plaintext 2 is empty!");
            } 
        }else{
            JOptionPane.showMessageDialog(null, "Plaintext 1 is empty!");
        }
    }//GEN-LAST:event_jButton_calculate_avalancheEffect_RC4A1ActionPerformed

    private void jButton_browsePlaintext1_avalancheEffect_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext1_avalancheEffect_RC4AActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext 1");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {         
            jTextArea_plainText1_avalancheEffect_RC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText1_avalancheEffect_RC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");        
    }//GEN-LAST:event_jButton_browsePlaintext1_avalancheEffect_RC4AActionPerformed

    private void jButton_browsePlaintext2_avalancheEffect_RC4AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext2_avalancheEffect_RC4AActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext 2");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {          
            jTextArea_plainText2_avalancheEffect_RC4A.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText2_avalancheEffect_RC4A.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");  
    }//GEN-LAST:event_jButton_browsePlaintext2_avalancheEffect_RC4AActionPerformed

    private void jButton_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RSAActionPerformed
        String selectedItem = jComboBox_RSA.getSelectedItem().toString();
        switch (selectedItem) {
            case "Encrypt":
                jPanel_enkripsi_RSA.setVisible(true);
                jPanel_dekripsi_RSA.setVisible(false);
                jPanel_avalancheEffect_RSA.setVisible(false);
                break;
            case "Decrypt":
                jPanel_enkripsi_RSA.setVisible(false);
                jPanel_dekripsi_RSA.setVisible(true);
                jPanel_avalancheEffect_RSA.setVisible(false);
                break;
            case "Avalanche Effect":
                jPanel_enkripsi_RSA.setVisible(false);
                jPanel_dekripsi_RSA.setVisible(false);
                jPanel_avalancheEffect_RSA.setVisible(true);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jButton_RSAActionPerformed

    private void jComboBox_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_RSAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_RSAActionPerformed

    private void jTextField_E_publicKeyRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_E_publicKeyRSAActionPerformed

    }//GEN-LAST:event_jTextField_E_publicKeyRSAActionPerformed

    private void jTextField_plainTeks_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_plainTeks_RSAActionPerformed

    }//GEN-LAST:event_jTextField_plainTeks_RSAActionPerformed

    private void jTextField_N_publicKeyRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_N_publicKeyRSAActionPerformed

    }//GEN-LAST:event_jTextField_N_publicKeyRSAActionPerformed

    private void jButton_browsePlaintext_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext_RSAActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));      
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {       
            jTextField_plainTeks_RSA.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_plainText_enkripsi_RSACRT.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plainText_enkripsi_RSA.setText(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePlaintext_RSAActionPerformed

    private void jButton_GenerateKey_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GenerateKey_RSAActionPerformed
        Key_RSA key = rsaKey.generateKey();
        String P = key.p.toString();
        String Q = key.q.toString();
        String N = key.N.toString();
        String D = key.d.toString();
        String E = key.e.toString();
        
        System.out.println("P:"+P);
        System.out.println("Q:"+Q);
        System.out.println("N:"+N);
        System.out.println("D:"+D);
        System.out.println("E:"+E);
        
        if(!P.equals("")&&!Q.equals("")&&!N.equals("")&&!D.equals("")&&!E.equals("")){     
            rsaKey.p = new BigInteger(P); 
            rsaKey.q = new BigInteger(Q);
            rsaKey.N = new BigInteger(N);
            rsaKey.d = new BigInteger(D);
            rsaKey.e = new BigInteger(E);
            
            // create an object of JFileChooser class
            JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            // restrict the user to select files of all types
            j.setAcceptAllFileFilterUsed(false);
            // set a title for the dialog
            j.setDialogTitle("Save Key");
            // only allow files of .txt extension
            FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsapublickey .rsaprivatekey", "rsapublickey", "rsaprivatekey");
            j.addChoosableFileFilter(restrict);
            // invoke the showsSaveDialog function to show the save dialog
            int s = j.showSaveDialog(null);
            
            // if the user selects a file
            if (s == JFileChooser.APPROVE_OPTION)
            {
                // set the label to the path of the selected file
                int save = Key_RSA.saveFileKeyRSA(rsaKey, j.getSelectedFile().getAbsolutePath());
                if (save == -1){
                    JOptionPane.showMessageDialog(null, "File already exists.");
                }
                JOptionPane.showMessageDialog(null, "Save key success"); 
                
                String [] readPublicKey = rsaKey.readKeyRSA(j.getSelectedFile().getAbsolutePath()+"-pbc.rsapublickey");
                Key_RSA publicKey = rsaKey.getPublicKey(readPublicKey);
                String N_key = publicKey.N.toString();
                String E_key = publicKey.e.toString();

                rsaKey.setPublicKey(publicKey.N, publicKey.e);
                jTextField_N_publicKeyRSA.setText(N_key);
                jTextField_E_publicKeyRSA.setText(E_key);    
            }
            // if the user cancelled the operation
            else
                JOptionPane.showMessageDialog(null, "Save key has been canceled"); 
        } else{
            JOptionPane.showMessageDialog(null, "Invalid Key!");
        }
        
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_GenerateKey_RSAActionPerformed

    private void jTextField_processingTime_RSA_enkripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_processingTime_RSA_enkripsiActionPerformed

    }//GEN-LAST:event_jTextField_processingTime_RSA_enkripsiActionPerformed

    private void jButton_enkripsi_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_enkripsi_RSAActionPerformed
        long start1,end1,exc1;
        String plainText = jTextArea_plainText_enkripsi_RSA.getText();

        if(! plainText.equals("")){
            try{
                start1 = System.currentTimeMillis();
                plainText = plainText.replaceAll("[^\\x00-\\x7F]", "");
                plainText = plainText.trim();
                
                String []split = plainText.split("\n");
                processRSA []ciphers = new processRSA[split.length];
                String []ciphersString = new String[split.length];
                String ciphertext = "";

                for (int i = 0 ; i<split.length ; i++){
                    if("".equals(split[i])){
                        split[i] = " ";
                    } 

                    ciphers [i] = RSA.encryptRSA(split[i], rsaKey.getPublicKey());
                    ciphersString[i] = ciphers[i].enkripsi;
                }
                ciphertext = String.join("&&",ciphersString);
                end1 = System.currentTimeMillis();
                exc1 = end1-start1;
                
                System.out.println("cipher "+ciphertext);//ke-"+x+": "+ciphertext);
                
                System.out.println("start :"+start1);//ke-"+x+": "+start1);
                System.out.println("end :"+end1);//ke-"+x+": "+end1);
                System.out.println("exc ::"+exc1);//ke-"+x+": "+exc1);
                    
                if(! jTextField_plainTeks_RSA.getText().equals("")){
                    String extension = FilenameUtils.getExtension(jTextField_plainTeks_RSA.getText());
                    System.out.println(extension);
                    
                    // create an object of JFileChooser class
                    JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    // restrict the user to select files of all types
                    j.setAcceptAllFileFilterUsed(false);
                    // set a title for the dialog
                    j.setDialogTitle("Save File");
                    
                    FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
                    
                    j.addChoosableFileFilter(restrict);
                                    
                    int save = 0;
                    // invoke the showsSaveDialog function to show the save dialog
                    int r = j.showSaveDialog(null);
                    // if the user selects a file
                    if (r == JFileChooser.APPROVE_OPTION){
                        crFile file = new crFile();
                        switch (extension) {
                            case "txt":        
                                save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", ciphertext);
                                break;
                            case "pdf":
                            {
                                try {
                                    save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", ciphertext);
                                    System.out.println(save);
                                }  catch (IOException ex) {
                                    Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                                break;

                            default:
                                break;
                        }
                        // set the label to the path of the selected file         
                        if (save == -1){
                            JOptionPane.showMessageDialog(null, "File already exists.");
                            exc1 = 0;
                        } else if (save == 1){
                            JOptionPane.showMessageDialog(null, "Save File success");
                        }
                        jTextArea_cipherText_enkripsi_RSA.setText(ciphertext);
                        
                    } else{
                        JOptionPane.showMessageDialog(null, "Save File has been canceled");
                        exc1 = 0;
                    }
                } else {
                    jTextArea_cipherText_enkripsi_RSA.setText(ciphertext);
                    
                }
            }catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Key is empty!");
                exc1 = 0;
            }
        } else{
            JOptionPane.showMessageDialog(null, "Plaintext is empty!");
            exc1 = 0;
        } 
        jTextField_processingTime_RSA_enkripsi.setText(Double.toString(exc1));
    }//GEN-LAST:event_jButton_enkripsi_RSAActionPerformed

    private void jTextField_cipherTeksRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_cipherTeksRSAActionPerformed

    }//GEN-LAST:event_jTextField_cipherTeksRSAActionPerformed

    private void jTextField_RSA_privateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_RSA_privateKeyActionPerformed

    }//GEN-LAST:event_jTextField_RSA_privateKeyActionPerformed

    private void jButton_browseCiphertext_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browseCiphertext_RSAActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Ciphertext");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word Documents (*.docx)", "docx"));
//        j.addChoosableFileFilter(new FileNameExtensionFilter("Word 97-2003 (*.doc)", "doc"));        
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            RSACRT crt = new RSACRT();
            
            jTextField_cipherTeksRSA.setText(j.getSelectedFile().getAbsolutePath()); 
            jTextArea_cipherText_dekripsi_RSA.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_cipherText_dekripsi_RSA.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browseCiphertext_RSAActionPerformed

    private void jButton_browsePrivatekey_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePrivatekey_RSAActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Private Key");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsaprivatekey", "rsaprivatekey");
        j.addChoosableFileFilter(restrict);
        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            String [] readPrivateKey = rsaKey.readKeyRSA(j.getSelectedFile().getAbsolutePath());
            Key_RSA privateKey = rsaKey.getPrivateKey(readPrivateKey);

            rsaKey.setPrivateKey(privateKey.N, privateKey.d);

            jTextField_RSA_privateKey.setText(j.getSelectedFile().getAbsolutePath());          
        } else {
            JOptionPane.showMessageDialog(null, "Choose private key has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browsePrivatekey_RSAActionPerformed

    private void jButton_dekripsi_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_dekripsi_RSAActionPerformed
        String cipherText = jTextArea_cipherText_dekripsi_RSA.getText();
        try{
            if(! cipherText.equals("")){
                if(! jTextField_RSA_privateKey.getText().equals("")){
                    start = System.currentTimeMillis();
                    
                    String joinCipher = cipherText;
            
                    joinCipher = joinCipher.replaceAll("[^\\x00-\\x7F]", "");

                    // erases all the ASCII control characters
                    //joinCipher = joinCipher.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", "");

                    // removes non-printable characters from Unicode
                    joinCipher = joinCipher.replaceAll("\\p{C}", "");
                    joinCipher = joinCipher.trim();
            
                    String []splitCiphers = joinCipher.split("&&");
                    String []newPlainsItem = new String[splitCiphers.length];
                    String newPlains = "";
                    
                    for (int i = 0 ; i<splitCiphers.length ; i++){         
                        String []splitCipherItems = splitCiphers[i].split("::");
                        newPlainsItem[i] = RSA.decryptRSA(splitCipherItems, rsaKey.getPrivateKey());
                    }
                    newPlains = String.join("\n", newPlainsItem);
                    end = System.currentTimeMillis();
                    executionTime = end-start;
                    
                    System.out.println("start: "+start);
                    System.out.println("end: "+end);
                    System.out.println("exc: "+executionTime);
                    
                    if(! jTextField_cipherTeksRSA.getText().equals("")){
                        String extension = FilenameUtils.getExtension(jTextField_cipherTeksRSA.getText());
                        System.out.println(extension);

                        // create an object of JFileChooser class
                        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                        // restrict the user to select files of all types
                        j.setAcceptAllFileFilterUsed(false);
                        // set a title for the dialog
                        j.setDialogTitle("Save File");

                        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");

                        j.addChoosableFileFilter(restrict);

                        int save = 0;
                        // invoke the showsSaveDialog function to show the save dialog
                        int r = j.showSaveDialog(null);
                        // if the user selects a file
                        if (r == JFileChooser.APPROVE_OPTION){
                            crFile file = new crFile();
                            switch (extension) {
                                case "txt":        
                                    save = file.saveFile(j.getSelectedFile().getAbsolutePath(), "txt", newPlains);
                                    break;
                                case "pdf":
                                {
                                    try {
                                        save = file.makePDF(j.getSelectedFile().getAbsolutePath(), "pdf", newPlains);
                                    }  catch (IOException ex) {
                                        Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                                    break;

                                default:
                                    break;
                            }
                            System.out.println(extension);
                            // set the label to the path of the selected file         
                            if (save == -1){
                                JOptionPane.showMessageDialog(null, "File already exists.");
                                executionTime = 0;
                            } else if (save == 1){
                                JOptionPane.showMessageDialog(null, "Save File success");  
                            }
                            jTextArea_plainText_dekripsi_RSA.setText(newPlains);
                            executionTime = end-start;
                        } else{
                            JOptionPane.showMessageDialog(null, "Save File has been canceled");
                            executionTime = 0;
                        }
                    } else {
                        jTextArea_plainText_dekripsi_RSA.setText(newPlains);
                        executionTime = end-start;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Key is empty!");
                    executionTime = 0;
                }
            } else{
                JOptionPane.showMessageDialog(null, "Ciphertext is empty!");
                executionTime = 0;
            }
        } catch (NumberFormatException exc){
            jTextArea_cipherText_dekripsi_RSA.setText("");
            JOptionPane.showMessageDialog(null, "Wrong Format Ciphertext");
            executionTime = 0;
            exc.printStackTrace();
        }
        jTextField_processingTime_RSA_dekripsi.setText(Double.toString(executionTime));
    }//GEN-LAST:event_jButton_dekripsi_RSAActionPerformed

    private void jTextField_N_avalancheEffect_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_N_avalancheEffect_RSAActionPerformed

    }//GEN-LAST:event_jTextField_N_avalancheEffect_RSAActionPerformed

    private void jTextField_E_avalancheEffect_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_E_avalancheEffect_RSAActionPerformed
 
    }//GEN-LAST:event_jTextField_E_avalancheEffect_RSAActionPerformed

    private void jButton_calculate_avalancheEffect_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calculate_avalancheEffect_RSAActionPerformed
        avalancheEffect AE = new avalancheEffect();
        String plainText1 = jTextArea_plaintext1_avalancheEffect_RSA.getText();
        plainText1 = plainText1.replaceAll("\n", " ");
        plainText1 = plainText1.substring(0, 20);
        String []plainText2 = AE.makeSomePlain(plainText1);
        
        if (!plainText1.equals("")){
            if (!plainText2.equals("")){
                    try{
                        plainText1 = plainText1.replaceAll("[^\\x00-\\x7F]", "");
                        plainText1 = plainText1.trim();
                        
                        String []split1 = plainText1.split("\n");
                        processRSA []ciphers1 = new processRSA[split1.length];
                        String []ciphersString1 = new String[split1.length];
                        String ciphertext1 = "";

                        for (int i = 0 ; i<split1.length ; i++){
                            if("".equals(split1[i])){
                                split1[i] = " ";
                            } 
                            ciphers1 [i] = RSA.encryptRSA(split1[i], rsaKey.getPublicKey());
                            ciphersString1 [i] = ciphers1[i].enkripsi;
                        }
                        ciphertext1 = String.join("&&",ciphersString1);
                        
                        String[] newPlains = AE.makeSomePlain(plainText1);

                        System.out.println(Arrays.toString(newPlains));

                        String []ciphertext2 = new String [newPlains.length];
                        for(int i=0; i<newPlains.length; i++){
                            newPlains[i] = newPlains[i].replaceAll("[^\\x00-\\x7F]", "");
                            newPlains[i] = newPlains[i].trim();
                            String []split2 = newPlains[i].split("\n");
                            processRSA []ciphers2 = new processRSA[split2.length];
                            String []ciphersString2 = new String[split2.length];
                            String cipher2 = "";

                            for (int j = 0 ; j<split2.length ; j++){
                                if("".equals(split2[j])){
                                    split2[j] = " ";
                                } 
                                ciphers2 [j] = RSA.encryptRSA(split2[j], rsaKey.getPublicKey());
                                ciphersString2 [j] = ciphers2[j].enkripsi;
                            }
                            cipher2 = String.join("&&",ciphersString2);
                            ciphertext2[i] = cipher2;
                        }
                        System.out.println("cipher2; "+Arrays.toString(ciphertext2));

                        String result = AE.avalancheEffect(ciphertext1,  ciphertext2, plainText1, newPlains);  
                        jTextArea_avalancheEffect_RSA.setText(result);
                    }catch(Exception e){
                        e.printStackTrace();
                        System.out.println(e.toString());
                        JOptionPane.showMessageDialog(null, "Key is empty!");
                    }
            }else{
                JOptionPane.showMessageDialog(null, "Plaintext 2 is empty!");
            } 
        }else{
            JOptionPane.showMessageDialog(null, "Plaintext 1 is empty!");
        }
    }//GEN-LAST:event_jButton_calculate_avalancheEffect_RSAActionPerformed

    private void jButton_browseKey_avalancheEffect_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browseKey_avalancheEffect_RSAActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Public Key");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".rsapublickey", "rsapublickey");
        j.addChoosableFileFilter(restrict);
        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
          String [] readPublicKey = rsaKey.readKeyRSA(j.getSelectedFile().getAbsolutePath());
          Key_RSA publicKey = rsaKey.getPublicKey(readPublicKey);
          String N = publicKey.N.toString();
          String E = publicKey.e.toString();

          rsaKey.setPublicKey(publicKey.N, publicKey.e);
          jTextField_N_avalancheEffect_RSA.setText(N);
          jTextField_E_avalancheEffect_RSA.setText(E);                
        } else {
          JOptionPane.showMessageDialog(null, "Choose public key has been canceled");
        }
        System.out.println("Read file success");
    }//GEN-LAST:event_jButton_browseKey_avalancheEffect_RSAActionPerformed

    private void jButton_browsePlaintext1_avalancheEffect_RSACRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext1_avalancheEffect_RSACRTActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext 1");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {         
            jTextArea_plaintext1_avalancheEffect_RSACRT.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plaintext1_avalancheEffect_RSACRT.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");  
    }//GEN-LAST:event_jButton_browsePlaintext1_avalancheEffect_RSACRTActionPerformed

    private void jButton_browsePlaintext1_avalancheEffect_RSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browsePlaintext1_avalancheEffect_RSAActionPerformed
        // create an object of JFileChooser class
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        // resctrict the user to select files of all types
        j.setAcceptAllFileFilterUsed(false);
        // set a title for the dialog
        j.setDialogTitle("Select Plaintext 1");
        // only allow files of .txt extension
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("All files (*.txt, *.pdf)", "txt", "pdf");
        j.addChoosableFileFilter(restrict);
        j.addChoosableFileFilter(new FileNameExtensionFilter("Plaintext (*.txt)", "txt"));
        j.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents (*.pdf)", "pdf"));

        // invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // if the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {         
            jTextArea_plaintext1_avalancheEffect_RSA.setEditable(false);
            String content = "";
            crFile files = new crFile(); 
            
            try {
                String fileExtension = FilenameUtils.getExtension(j.getSelectedFile().getAbsolutePath());
                if(null != fileExtension)switch (fileExtension) {
                    case "txt":
                        //txt
                        content = files.readFile(j.getSelectedFile().getAbsolutePath());
                        break;
                    case "pdf":
                        //pdf
                        content = files.readPDF(j.getSelectedFile().getAbsolutePath());
                        break;
                    default:
                        break;
                }

                jTextArea_plaintext1_avalancheEffect_RSA.setText(content);
                System.out.println(content);
            } catch (IOException ex) {
                Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose File has been canceled");
        }
        System.out.println("Read file success");  
    }//GEN-LAST:event_jButton_browsePlaintext1_avalancheEffect_RSAActionPerformed

    private void firstPanel(){
        jPanel_RC4A.setVisible(false);
        jPanel_RSA.setVisible(true);
        jPanel_RSACRT.setVisible(false);  
        jPanel_Hybrid.setVisible(false);
        jPanel_enkripsi_RC4A.setVisible(false);
        jPanel_dekripsi_RC4A.setVisible(false); 
        jPanel_avalancheEffect_RC4A.setVisible(false);
        
        jPanel_enkripsi_RSA.setVisible(true);
        jPanel_dekripsi_RSA.setVisible(false);
        jPanel_avalancheEffect_RSA.setVisible(false);
        jPanel_enkripsi_RSACRT.setVisible(false);
        jPanel_dekripsi_RSACRT.setVisible(false);
        jPanel_avalancheEffect_RSACRT.setVisible(false);
        jPanel_enkripsi_Hybrid.setVisible(false);
        jPanel_dekripsi_Hybrid.setVisible(false); 
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new userInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_GenerateKey_RSA;
    private javax.swing.JButton jButton_GenerateKey_RSACRT;
    private javax.swing.JButton jButton_Hybrid_option;
    private javax.swing.JButton jButton_RC4A_option;
    private javax.swing.JButton jButton_RSA;
    private javax.swing.JButton jButton_RSACRT_option;
    private javax.swing.JButton jButton_browseCiphertext_RSA;
    private javax.swing.JButton jButton_browseCiphertext_RSACRT;
    private javax.swing.JButton jButton_browseKey_avalancheEffect_RSA;
    private javax.swing.JButton jButton_browseKey_avalancheEffect_RSACRT;
    private javax.swing.JButton jButton_browsePlaintext1_avalancheEffect_RC4A;
    private javax.swing.JButton jButton_browsePlaintext1_avalancheEffect_RSA;
    private javax.swing.JButton jButton_browsePlaintext1_avalancheEffect_RSACRT;
    private javax.swing.JButton jButton_browsePlaintext2_avalancheEffect_RC4A;
    private javax.swing.JButton jButton_browsePlaintext_RC4A;
    private javax.swing.JButton jButton_browsePlaintext_RSA;
    private javax.swing.JButton jButton_browsePlaintext_RSACRT;
    private javax.swing.JButton jButton_browsePlaintext_hybrid_RC4A;
    private javax.swing.JButton jButton_browsePrivatekey_RSA;
    private javax.swing.JButton jButton_browsePrivatekey_RSACRT;
    private javax.swing.JButton jButton_browse_RSACRT_privateKey_Hybrid;
    private javax.swing.JButton jButton_browsecipherText_Hybrid_RSACRT;
    private javax.swing.JButton jButton_browseciphertext_RC4A;
    private javax.swing.JButton jButton_calculate_avalancheEffect_RC4A1;
    private javax.swing.JButton jButton_calculate_avalancheEffect_RSA;
    private javax.swing.JButton jButton_calculate_avalancheEffect_RSACRT;
    private javax.swing.JButton jButton_dekripsi_RC4A;
    private javax.swing.JButton jButton_dekripsi_RSA;
    private javax.swing.JButton jButton_dekripsi_RSACRT;
    private javax.swing.JButton jButton_dekripsi_hybrid;
    private javax.swing.JButton jButton_enkripsi_RC4A;
    private javax.swing.JButton jButton_enkripsi_RSA;
    private javax.swing.JButton jButton_enkripsi_RSACRT;
    private javax.swing.JButton jButton_enkripsi_hybrid_RC4A;
    private javax.swing.JButton jButton_generate_RSACRT_Key_Hybrid;
    private javax.swing.JComboBox<String> jComboBox_Hybrid;
    private javax.swing.JComboBox<String> jComboBox_RC4A;
    private javax.swing.JComboBox<String> jComboBox_RSA;
    private javax.swing.JComboBox<String> jComboBox_RSACRT;
    private javax.swing.JLabel jLabel1_E_publicKey_RSA;
    private javax.swing.JLabel jLabel1_E_publicKey_RSACRT;
    private javax.swing.JLabel jLabel1_cipherteks_RSACRT_enkripsi;
    private javax.swing.JLabel jLabel1_cipherteks_RSA_enkripsi;
    private javax.swing.JLabel jLabel1_plainteks_RSACRT_dekripsi;
    private javax.swing.JLabel jLabel1_plainteks_RSA_dekripsi;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_E_Key_Hybrid_RSACRT;
    private javax.swing.JLabel jLabel_E_avalancheEffect_RSA;
    private javax.swing.JLabel jLabel_E_avalancheEffect_RSACRT;
    private javax.swing.JLabel jLabel_Key_RC4A;
    private javax.swing.JLabel jLabel_Key_RC4A1;
    private javax.swing.JLabel jLabel_Key_RC4A_enkripsi_hybrid;
    private javax.swing.JLabel jLabel_Key_dekripsi_hybrid_RSACRT;
    private javax.swing.JLabel jLabel_Key_hybrid_RSACRT;
    private javax.swing.JLabel jLabel_N_Key_Hybrid_RSACRT;
    private javax.swing.JLabel jLabel_N_avalancheEffect_RSA;
    private javax.swing.JLabel jLabel_N_avalancheEffect_RSACRT;
    private javax.swing.JLabel jLabel_avalancheEffect_RC4A;
    private javax.swing.JLabel jLabel_browseFile_dekripsi_RC4A;
    private javax.swing.JLabel jLabel_browseFile_dekripsi_RSA;
    private javax.swing.JLabel jLabel_browseFile_dekripsi_RSACRT;
    private javax.swing.JLabel jLabel_browseFile_dekripsi_hybrid_RC4A;
    private javax.swing.JLabel jLabel_browseFile_enkripsi_RC4A;
    private javax.swing.JLabel jLabel_browseFile_enkripsi_RSA;
    private javax.swing.JLabel jLabel_browseFile_enkripsi_RSACRT;
    private javax.swing.JLabel jLabel_browseFile_enkripsi_hybrid_RC4A;
    private javax.swing.JLabel jLabel_cipherKey_Hybrid_RSACRT_dekripsi;
    private javax.swing.JLabel jLabel_cipherKey_Hybrid_RSACRT_enkripsi;
    private javax.swing.JLabel jLabel_cipherTeks_hybrid_RC4A_dekripsi;
    private javax.swing.JLabel jLabel_cipherteks_RC4A_dekripsi;
    private javax.swing.JLabel jLabel_cipherteks_RC4A_enkripsi;
    private javax.swing.JLabel jLabel_cipherteks_RSACRT_dekripsi;
    private javax.swing.JLabel jLabel_cipherteks_RSA_dekripsi;
    private javax.swing.JLabel jLabel_cipherteks_hybrid_RC4A_enkripsi;
    private javax.swing.JLabel jLabel_dekripsi_HybridCryptosystem;
    private javax.swing.JLabel jLabel_dekripsi_RC4A;
    private javax.swing.JLabel jLabel_dekripsi_RSA;
    private javax.swing.JLabel jLabel_dekripsi_RSACRT;
    private javax.swing.JLabel jLabel_enkripsi_HybridCryptosystem;
    private javax.swing.JLabel jLabel_enkripsi_RC4A;
    private javax.swing.JLabel jLabel_enkripsi_RSA;
    private javax.swing.JLabel jLabel_enkripsi_RSACRT;
    private javax.swing.JLabel jLabel_generateKey_RSA;
    private javax.swing.JLabel jLabel_generateKey_RSACRT2;
    private javax.swing.JLabel jLabel_key_avalancheEffect_RC4A;
    private javax.swing.JLabel jLabel_key_avalancheEffect_RSA;
    private javax.swing.JLabel jLabel_key_avalancheEffect_RSACRT;
    private javax.swing.JLabel jLabel_plainKey_Hybrid_RSACRT_dekripsi;
    private javax.swing.JLabel jLabel_plainTeks_hybrid_RC4A_dekripsi;
    private javax.swing.JLabel jLabel_plainteks_RC4A_dekripsi;
    private javax.swing.JLabel jLabel_plainteks_RC4A_enkripsi;
    private javax.swing.JLabel jLabel_plainteks_RSACRT_enkripsi;
    private javax.swing.JLabel jLabel_plainteks_RSA_enkripsi;
    private javax.swing.JLabel jLabel_plainteks_hybrid_RC4A_enkripsi;
    private javax.swing.JLabel jLabel_plaintext1_avalancheEffect_RC4A;
    private javax.swing.JLabel jLabel_plaintext1_avalancheEffect_RSA;
    private javax.swing.JLabel jLabel_plaintext1_avalancheEffect_RSACRT;
    private javax.swing.JLabel jLabel_plaintext2_avalancheEffect_RC4A;
    private javax.swing.JLabel jLabel_privateKey_RSA;
    private javax.swing.JLabel jLabel_privateKey_RSACRT;
    private javax.swing.JLabel jLabel_processingTime_Hybrid_dekripsi;
    private javax.swing.JLabel jLabel_processingTime_RC4A_dekripsi;
    private javax.swing.JLabel jLabel_processingTime_RC4A_enkripsi;
    private javax.swing.JLabel jLabel_processingTime_RSACRT_dekripsi;
    private javax.swing.JLabel jLabel_processingTime_RSACRT_enkripsi;
    private javax.swing.JLabel jLabel_processingTime_RSA_dekripsi;
    private javax.swing.JLabel jLabel_processingTime_RSA_enkripsi;
    private javax.swing.JLabel jLabel_processingTime_hybrid_enkripsi_plainTeks;
    private javax.swing.JLabel jLabel_publicKey_RSA;
    private javax.swing.JLabel jLabel_publicKey_RSACRT;
    private javax.swing.JLabel jLabel_result_avalancheEffect_RC4A;
    private javax.swing.JLabel jLabel_result_avalancheEffect_RSA;
    private javax.swing.JLabel jLabel_result_avalancheEffect_RSACRT;
    private javax.swing.JLayeredPane jLayeredPane_Hybrid;
    private javax.swing.JLayeredPane jLayeredPane_RC4A;
    private javax.swing.JLayeredPane jLayeredPane_RSA;
    private javax.swing.JLayeredPane jLayeredPane_RSACRT;
    private javax.swing.JLayeredPane jLayeredPane_avalancheEffect;
    private javax.swing.JLayeredPane jLayeredPane_avalancheEffect_RC4A;
    private javax.swing.JLayeredPane jLayeredPane_avalancheEffect_RSACRT;
    private javax.swing.JLayeredPane jLayeredPane_dekripsi_Hybrid;
    private javax.swing.JLayeredPane jLayeredPane_dekripsi_RC4A;
    private javax.swing.JLayeredPane jLayeredPane_dekripsi_RSA;
    private javax.swing.JLayeredPane jLayeredPane_dekripsi_RSACRT;
    private javax.swing.JLayeredPane jLayeredPane_enkripsi_Hybrid;
    private javax.swing.JLayeredPane jLayeredPane_enkripsi_RC4A;
    private javax.swing.JLayeredPane jLayeredPane_enkripsi_RSA;
    private javax.swing.JLayeredPane jLayeredPane_enkripsi_RSACRT;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_HybridCryptosystem;
    private javax.swing.JMenuItem jMenuItem_RSA;
    private javax.swing.JMenuItem jMenuItem_RSACRT;
    private javax.swing.JMenu jMenu_algoritma;
    private javax.swing.JPanel jPanel_Hybrid;
    private javax.swing.JPanel jPanel_RC4A;
    private javax.swing.JPanel jPanel_RSA;
    private javax.swing.JPanel jPanel_RSACRT;
    private javax.swing.JPanel jPanel__avalancheEffect_RC4A_Form;
    private javax.swing.JPanel jPanel__avalancheEffect_RSACRT_Form;
    private javax.swing.JPanel jPanel__avalancheEffect_RSA_Form;
    private javax.swing.JPanel jPanel_avalancheEffect_RC4A;
    private javax.swing.JPanel jPanel_avalancheEffect_RSA;
    private javax.swing.JPanel jPanel_avalancheEffect_RSACRT;
    private javax.swing.JPanel jPanel_dekripsiField_RC4A;
    private javax.swing.JPanel jPanel_dekripsiField_RSA;
    private javax.swing.JPanel jPanel_dekripsiField_RSACRT;
    private javax.swing.JPanel jPanel_dekripsiKeyField_RSACRT;
    private javax.swing.JPanel jPanel_dekripsi_Hybrid;
    private javax.swing.JPanel jPanel_dekripsi_RC4A;
    private javax.swing.JPanel jPanel_dekripsi_RSA;
    private javax.swing.JPanel jPanel_dekripsi_RSACRT;
    private javax.swing.JPanel jPanel_enkripsiField_RC4A;
    private javax.swing.JPanel jPanel_enkripsiField_RSA;
    private javax.swing.JPanel jPanel_enkripsiField_RSACRT;
    private javax.swing.JPanel jPanel_enkripsiKeyField_RSACRT;
    private javax.swing.JPanel jPanel_enkripsiPlainteksField_RC4A;
    private javax.swing.JPanel jPanel_enkripsi_Hybrid;
    private javax.swing.JPanel jPanel_enkripsi_RC4A;
    private javax.swing.JPanel jPanel_enkripsi_RSA;
    private javax.swing.JPanel jPanel_enkripsi_RSACRT;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RC4A;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RC4A1;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RC4A2;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RC4A4;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RC4A6;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RSA;
    private javax.swing.JScrollPane jScrollPane_avalancheEffect_RSACRT;
    private javax.swing.JScrollPane jScrollPane_cipherKey_dekripsi_hybridRSACRT;
    private javax.swing.JScrollPane jScrollPane_cipherKey_enkripsi_hybridRSACRT;
    private javax.swing.JScrollPane jScrollPane_cipherTeks_dekripsi_hybridRC4A;
    private javax.swing.JScrollPane jScrollPane_cipherText_dekripsi_RC4A;
    private javax.swing.JScrollPane jScrollPane_cipherText_dekripsi_RSA;
    private javax.swing.JScrollPane jScrollPane_cipherText_dekripsi_RSACRT;
    private javax.swing.JScrollPane jScrollPane_cipherText_enkripsi_RC4A;
    private javax.swing.JScrollPane jScrollPane_cipherText_enkripsi_RSA;
    private javax.swing.JScrollPane jScrollPane_cipherText_enkripsi_RSACRT;
    private javax.swing.JScrollPane jScrollPane_cipherText_enkripsi_hybridRC4A;
    private javax.swing.JScrollPane jScrollPane_plainTeks_dekripsi_hybridRC4A;
    private javax.swing.JScrollPane jScrollPane_plainText_dekripsi_RC4A;
    private javax.swing.JScrollPane jScrollPane_plainText_dekripsi_RSA;
    private javax.swing.JScrollPane jScrollPane_plainText_dekripsi_RSACRT;
    private javax.swing.JScrollPane jScrollPane_plainText_enkripsi_RC4A;
    private javax.swing.JScrollPane jScrollPane_plainText_enkripsi_RSA;
    private javax.swing.JScrollPane jScrollPane_plainText_enkripsi_RSACRT;
    private javax.swing.JScrollPane jScrollPane_plainText_enkripsi_hybridRC4A;
    private javax.swing.JTextArea jTextArea_avalancheEffect_RC4A1;
    private javax.swing.JTextArea jTextArea_avalancheEffect_RSA;
    private javax.swing.JTextArea jTextArea_avalancheEffect_RSACRT;
    private javax.swing.JTextField jTextArea_cipherKey_dekripsi_hybridRSACRT;
    private javax.swing.JTextArea jTextArea_cipherKey_enkripsi_hybridRSACRT;
    private javax.swing.JTextArea jTextArea_cipherTeks_dekripsi_hybridRC4A;
    private javax.swing.JTextArea jTextArea_cipherText_dekripsi_RC4A;
    private javax.swing.JTextArea jTextArea_cipherText_dekripsi_RSA;
    private javax.swing.JTextArea jTextArea_cipherText_dekripsi_RSACRT;
    private javax.swing.JTextArea jTextArea_cipherText_enkripsi_RC4A;
    private javax.swing.JTextArea jTextArea_cipherText_enkripsi_RSA;
    private javax.swing.JTextArea jTextArea_cipherText_enkripsi_RSACRT;
    private javax.swing.JTextArea jTextArea_cipherText_enkripsi_hybridRC4A;
    private javax.swing.JTextArea jTextArea_plainKey_dekripsi_hybridRSACRT;
    private javax.swing.JTextArea jTextArea_plainTeks_dekripsi_hybridRC4A;
    private javax.swing.JTextArea jTextArea_plainText1_avalancheEffect_RC4A;
    private javax.swing.JTextArea jTextArea_plainText2_avalancheEffect_RC4A;
    private javax.swing.JTextArea jTextArea_plainText_dekripsi_RC4A;
    private javax.swing.JTextArea jTextArea_plainText_dekripsi_RSA;
    private javax.swing.JTextArea jTextArea_plainText_dekripsi_RSACRT;
    private javax.swing.JTextArea jTextArea_plainText_enkripsi_RC4A;
    private javax.swing.JTextArea jTextArea_plainText_enkripsi_RSA;
    private javax.swing.JTextArea jTextArea_plainText_enkripsi_RSACRT;
    private javax.swing.JTextArea jTextArea_plainText_enkripsi_hybridRC4A;
    private javax.swing.JTextArea jTextArea_plaintext1_avalancheEffect_RSA;
    private javax.swing.JTextArea jTextArea_plaintext1_avalancheEffect_RSACRT;
    private javax.swing.JTextField jTextField_E_avalancheEffect_RSA;
    private javax.swing.JTextField jTextField_E_avalancheEffect_RSACRT;
    private javax.swing.JTextField jTextField_E_key_Hybrid_RSACRT;
    private javax.swing.JTextField jTextField_E_publicKey;
    private javax.swing.JTextField jTextField_E_publicKeyRSA;
    private javax.swing.JTextField jTextField_N_avalancheEffect_RSA;
    private javax.swing.JTextField jTextField_N_avalancheEffect_RSACRT;
    private javax.swing.JTextField jTextField_N_publicKey;
    private javax.swing.JTextField jTextField_N_publicKeyRSA;
    private javax.swing.JTextField jTextField_RSACRT_privateKey;
    private javax.swing.JTextField jTextField_RSA_privateKey;
    private javax.swing.JTextField jTextField_cipherTeks;
    private javax.swing.JTextField jTextField_cipherTeks1;
    private javax.swing.JTextField jTextField_cipherTeksRSA;
    private javax.swing.JTextField jTextField_cipherTeks_dekripsi_hybrid;
    private javax.swing.JTextField jTextField_key_N_Hybrid_RSACRT;
    private javax.swing.JTextField jTextField_key_RC4A;
    private javax.swing.JTextField jTextField_key_RC4A1;
    private javax.swing.JTextField jTextField_key_avalancheEffect_RC4A;
    private javax.swing.JTextField jTextField_key_enkripsi_hybrid_RC4A;
    private javax.swing.JTextField jTextField_plainTeks;
    private javax.swing.JTextField jTextField_plainTeks1;
    private javax.swing.JTextField jTextField_plainTeks_RSA;
    private javax.swing.JTextField jTextField_plainTeks_hybrid;
    private javax.swing.JTextField jTextField_privateKeyPath_dekripsi_Hybrid_RSACRT;
    private javax.swing.JTextField jTextField_processingTime_Hybrid_dekripsi;
    private javax.swing.JTextField jTextField_processingTime_RC4A_dekripsi;
    private javax.swing.JTextField jTextField_processingTime_RC4A_enkripsi;
    private javax.swing.JTextField jTextField_processingTime_RSACRT_dekripsi;
    private javax.swing.JTextField jTextField_processingTime_RSACRT_enkripsi;
    private javax.swing.JTextField jTextField_processingTime_RSA_dekripsi;
    private javax.swing.JTextField jTextField_processingTime_RSA_enkripsi;
    private javax.swing.JTextField jTextField_processingTime_hybrid_RC4A_enkripsi;
    // End of variables declaration//GEN-END:variables
}
